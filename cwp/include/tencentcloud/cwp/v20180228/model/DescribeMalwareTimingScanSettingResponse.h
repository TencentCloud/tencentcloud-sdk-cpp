/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_DESCRIBEMALWARETIMINGSCANSETTINGRESPONSE_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_DESCRIBEMALWARETIMINGSCANSETTINGRESPONSE_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * DescribeMalwareTimingScanSetting返回参数结构体
                */
                class DescribeMalwareTimingScanSettingResponse : public AbstractModel
                {
                public:
                    DescribeMalwareTimingScanSettingResponse();
                    ~DescribeMalwareTimingScanSettingResponse() = default;
                    CoreInternalOutcome Deserialize(const std::string &payload);
                    std::string ToJsonString() const;


                    /**
                     * 获取检测模式 0 全盘检测  1快速检测
                     * @return CheckPattern 检测模式 0 全盘检测  1快速检测
                     * 
                     */
                    uint64_t GetCheckPattern() const;

                    /**
                     * 判断参数 CheckPattern 是否已赋值
                     * @return CheckPattern 是否已赋值
                     * 
                     */
                    bool CheckPatternHasBeenSet() const;

                    /**
                     * 获取检测周期 开始时间
                     * @return StartTime 检测周期 开始时间
                     * 
                     */
                    std::string GetStartTime() const;

                    /**
                     * 判断参数 StartTime 是否已赋值
                     * @return StartTime 是否已赋值
                     * 
                     */
                    bool StartTimeHasBeenSet() const;

                    /**
                     * 获取检测周期 超时结束时间
                     * @return EndTime 检测周期 超时结束时间
                     * 
                     */
                    std::string GetEndTime() const;

                    /**
                     * 判断参数 EndTime 是否已赋值
                     * @return EndTime 是否已赋值
                     * 
                     */
                    bool EndTimeHasBeenSet() const;

                    /**
                     * 获取是否全部服务器 1 全部 2 自选
                     * @return IsGlobal 是否全部服务器 1 全部 2 自选
                     * 
                     */
                    uint64_t GetIsGlobal() const;

                    /**
                     * 判断参数 IsGlobal 是否已赋值
                     * @return IsGlobal 是否已赋值
                     * 
                     */
                    bool IsGlobalHasBeenSet() const;

                    /**
                     * 获取自选服务器时必须 主机quuid的string数组
                     * @return QuuidList 自选服务器时必须 主机quuid的string数组
                     * 
                     */
                    std::vector<std::string> GetQuuidList() const;

                    /**
                     * 判断参数 QuuidList 是否已赋值
                     * @return QuuidList 是否已赋值
                     * 
                     */
                    bool QuuidListHasBeenSet() const;

                    /**
                     * 获取监控模式 0 标准 1深度
                     * @return MonitoringPattern 监控模式 0 标准 1深度
                     * 
                     */
                    uint64_t GetMonitoringPattern() const;

                    /**
                     * 判断参数 MonitoringPattern 是否已赋值
                     * @return MonitoringPattern 是否已赋值
                     * 
                     */
                    bool MonitoringPatternHasBeenSet() const;

                    /**
                     * 获取周期 1每天
                     * @return Cycle 周期 1每天
                     * 
                     */
                    uint64_t GetCycle() const;

                    /**
                     * 判断参数 Cycle 是否已赋值
                     * @return Cycle 是否已赋值
                     * 
                     */
                    bool CycleHasBeenSet() const;

                    /**
                     * 获取定时检测开关 0 关闭1 开启
                     * @return EnableScan 定时检测开关 0 关闭1 开启
                     * 
                     */
                    int64_t GetEnableScan() const;

                    /**
                     * 判断参数 EnableScan 是否已赋值
                     * @return EnableScan 是否已赋值
                     * 
                     */
                    bool EnableScanHasBeenSet() const;

                    /**
                     * 获取唯一ID
                     * @return Id 唯一ID
                     * 
                     */
                    int64_t GetId() const;

                    /**
                     * 判断参数 Id 是否已赋值
                     * @return Id 是否已赋值
                     * 
                     */
                    bool IdHasBeenSet() const;

                    /**
                     * 获取实时监控0 关闭 1开启
                     * @return RealTimeMonitoring 实时监控0 关闭 1开启
                     * 
                     */
                    int64_t GetRealTimeMonitoring() const;

                    /**
                     * 判断参数 RealTimeMonitoring 是否已赋值
                     * @return RealTimeMonitoring 是否已赋值
                     * 
                     */
                    bool RealTimeMonitoringHasBeenSet() const;

                    /**
                     * 获取是否自动隔离：1-是，0-否
                     * @return AutoIsolation 是否自动隔离：1-是，0-否
                     * 
                     */
                    uint64_t GetAutoIsolation() const;

                    /**
                     * 判断参数 AutoIsolation 是否已赋值
                     * @return AutoIsolation 是否已赋值
                     * 
                     */
                    bool AutoIsolationHasBeenSet() const;

                    /**
                     * 获取一键扫描超时时长，如：1800秒（s）
                     * @return ClickTimeout 一键扫描超时时长，如：1800秒（s）
                     * 
                     */
                    uint64_t GetClickTimeout() const;

                    /**
                     * 判断参数 ClickTimeout 是否已赋值
                     * @return ClickTimeout 是否已赋值
                     * 
                     */
                    bool ClickTimeoutHasBeenSet() const;

                    /**
                     * 获取是否杀掉进程 1杀掉 0不杀掉 只有开启自动隔离才生效
                     * @return KillProcess 是否杀掉进程 1杀掉 0不杀掉 只有开启自动隔离才生效
                     * 
                     */
                    uint64_t GetKillProcess() const;

                    /**
                     * 判断参数 KillProcess 是否已赋值
                     * @return KillProcess 是否已赋值
                     * 
                     */
                    bool KillProcessHasBeenSet() const;

                    /**
                     * 获取1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
                     * @return EngineType 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
                     * 
                     */
                    uint64_t GetEngineType() const;

                    /**
                     * 判断参数 EngineType 是否已赋值
                     * @return EngineType 是否已赋值
                     * 
                     */
                    bool EngineTypeHasBeenSet() const;

                    /**
                     * 获取启发引擎 0 关闭 1开启
                     * @return EnableInspiredEngine 启发引擎 0 关闭 1开启
                     * 
                     */
                    uint64_t GetEnableInspiredEngine() const;

                    /**
                     * 判断参数 EnableInspiredEngine 是否已赋值
                     * @return EnableInspiredEngine 是否已赋值
                     * 
                     */
                    bool EnableInspiredEngineHasBeenSet() const;

                    /**
                     * 获取是否开启恶意进程查杀[0:未开启,1:开启]
                     * @return EnableMemShellScan 是否开启恶意进程查杀[0:未开启,1:开启]
                     * 
                     */
                    uint64_t GetEnableMemShellScan() const;

                    /**
                     * 判断参数 EnableMemShellScan 是否已赋值
                     * @return EnableMemShellScan 是否已赋值
                     * 
                     */
                    bool EnableMemShellScanHasBeenSet() const;

                    /**
                     * 获取防护模式 0 标准 1 重保
                     * @return ProtectMode 防护模式 0 标准 1 重保
                     * 
                     */
                    uint64_t GetProtectMode() const;

                    /**
                     * 判断参数 ProtectMode 是否已赋值
                     * @return ProtectMode 是否已赋值
                     * 
                     */
                    bool ProtectModeHasBeenSet() const;

                    /**
                     * 获取查杀范围 0 脚本类之外的恶意文件，1全部恶意文件
                     * @return ProtectFileScope 查杀范围 0 脚本类之外的恶意文件，1全部恶意文件
                     * 
                     */
                    uint64_t GetProtectFileScope() const;

                    /**
                     * 判断参数 ProtectFileScope 是否已赋值
                     * @return ProtectFileScope 是否已赋值
                     * 
                     */
                    bool ProtectFileScopeHasBeenSet() const;

                private:

                    /**
                     * 检测模式 0 全盘检测  1快速检测
                     */
                    uint64_t m_checkPattern;
                    bool m_checkPatternHasBeenSet;

                    /**
                     * 检测周期 开始时间
                     */
                    std::string m_startTime;
                    bool m_startTimeHasBeenSet;

                    /**
                     * 检测周期 超时结束时间
                     */
                    std::string m_endTime;
                    bool m_endTimeHasBeenSet;

                    /**
                     * 是否全部服务器 1 全部 2 自选
                     */
                    uint64_t m_isGlobal;
                    bool m_isGlobalHasBeenSet;

                    /**
                     * 自选服务器时必须 主机quuid的string数组
                     */
                    std::vector<std::string> m_quuidList;
                    bool m_quuidListHasBeenSet;

                    /**
                     * 监控模式 0 标准 1深度
                     */
                    uint64_t m_monitoringPattern;
                    bool m_monitoringPatternHasBeenSet;

                    /**
                     * 周期 1每天
                     */
                    uint64_t m_cycle;
                    bool m_cycleHasBeenSet;

                    /**
                     * 定时检测开关 0 关闭1 开启
                     */
                    int64_t m_enableScan;
                    bool m_enableScanHasBeenSet;

                    /**
                     * 唯一ID
                     */
                    int64_t m_id;
                    bool m_idHasBeenSet;

                    /**
                     * 实时监控0 关闭 1开启
                     */
                    int64_t m_realTimeMonitoring;
                    bool m_realTimeMonitoringHasBeenSet;

                    /**
                     * 是否自动隔离：1-是，0-否
                     */
                    uint64_t m_autoIsolation;
                    bool m_autoIsolationHasBeenSet;

                    /**
                     * 一键扫描超时时长，如：1800秒（s）
                     */
                    uint64_t m_clickTimeout;
                    bool m_clickTimeoutHasBeenSet;

                    /**
                     * 是否杀掉进程 1杀掉 0不杀掉 只有开启自动隔离才生效
                     */
                    uint64_t m_killProcess;
                    bool m_killProcessHasBeenSet;

                    /**
                     * 1标准模式（只报严重、高危）、2增强模式（报严重、高危、中危）、3严格模式（报严重、高、中、低、提示）
                     */
                    uint64_t m_engineType;
                    bool m_engineTypeHasBeenSet;

                    /**
                     * 启发引擎 0 关闭 1开启
                     */
                    uint64_t m_enableInspiredEngine;
                    bool m_enableInspiredEngineHasBeenSet;

                    /**
                     * 是否开启恶意进程查杀[0:未开启,1:开启]
                     */
                    uint64_t m_enableMemShellScan;
                    bool m_enableMemShellScanHasBeenSet;

                    /**
                     * 防护模式 0 标准 1 重保
                     */
                    uint64_t m_protectMode;
                    bool m_protectModeHasBeenSet;

                    /**
                     * 查杀范围 0 脚本类之外的恶意文件，1全部恶意文件
                     */
                    uint64_t m_protectFileScope;
                    bool m_protectFileScopeHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_DESCRIBEMALWARETIMINGSCANSETTINGRESPONSE_H_
