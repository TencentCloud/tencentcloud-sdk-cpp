/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_MALWARELIST_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_MALWARELIST_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * 木马列表集合
                */
                class MalWareList : public AbstractModel
                {
                public:
                    MalWareList();
                    ~MalWareList() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取服务器ip
                     * @return HostIp 服务器ip
                     */
                    std::string GetHostIp() const;

                    /**
                     * 设置服务器ip
                     * @param HostIp 服务器ip
                     */
                    void SetHostIp(const std::string& _hostIp);

                    /**
                     * 判断参数 HostIp 是否已赋值
                     * @return HostIp 是否已赋值
                     */
                    bool HostIpHasBeenSet() const;

                    /**
                     * 获取唯一UUID
                     * @return Uuid 唯一UUID
                     */
                    std::string GetUuid() const;

                    /**
                     * 设置唯一UUID
                     * @param Uuid 唯一UUID
                     */
                    void SetUuid(const std::string& _uuid);

                    /**
                     * 判断参数 Uuid 是否已赋值
                     * @return Uuid 是否已赋值
                     */
                    bool UuidHasBeenSet() const;

                    /**
                     * 获取路径
                     * @return FilePath 路径
                     */
                    std::string GetFilePath() const;

                    /**
                     * 设置路径
                     * @param FilePath 路径
                     */
                    void SetFilePath(const std::string& _filePath);

                    /**
                     * 判断参数 FilePath 是否已赋值
                     * @return FilePath 是否已赋值
                     */
                    bool FilePathHasBeenSet() const;

                    /**
                     * 获取描述
                     * @return VirusName 描述
                     */
                    std::string GetVirusName() const;

                    /**
                     * 设置描述
                     * @param VirusName 描述
                     */
                    void SetVirusName(const std::string& _virusName);

                    /**
                     * 判断参数 VirusName 是否已赋值
                     * @return VirusName 是否已赋值
                     */
                    bool VirusNameHasBeenSet() const;

                    /**
                     * 获取状态；4-:待处理，5-已信任，6-已隔离，8-文件已删除
                     * @return Status 状态；4-:待处理，5-已信任，6-已隔离，8-文件已删除
                     */
                    uint64_t GetStatus() const;

                    /**
                     * 设置状态；4-:待处理，5-已信任，6-已隔离，8-文件已删除
                     * @param Status 状态；4-:待处理，5-已信任，6-已隔离，8-文件已删除
                     */
                    void SetStatus(const uint64_t& _status);

                    /**
                     * 判断参数 Status 是否已赋值
                     * @return Status 是否已赋值
                     */
                    bool StatusHasBeenSet() const;

                    /**
                     * 获取唯一ID
注意：此字段可能返回 null，表示取不到有效值。
                     * @return Id 唯一ID
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    uint64_t GetId() const;

                    /**
                     * 设置唯一ID
注意：此字段可能返回 null，表示取不到有效值。
                     * @param Id 唯一ID
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    void SetId(const uint64_t& _id);

                    /**
                     * 判断参数 Id 是否已赋值
                     * @return Id 是否已赋值
                     */
                    bool IdHasBeenSet() const;

                    /**
                     * 获取主机别名
                     * @return Alias 主机别名
                     */
                    std::string GetAlias() const;

                    /**
                     * 设置主机别名
                     * @param Alias 主机别名
                     */
                    void SetAlias(const std::string& _alias);

                    /**
                     * 判断参数 Alias 是否已赋值
                     * @return Alias 是否已赋值
                     */
                    bool AliasHasBeenSet() const;

                    /**
                     * 获取特性标签，已废弃字段，不会再返回标签，详情中才会返回标签信息
注意：此字段可能返回 null，表示取不到有效值。
                     * @return Tags 特性标签，已废弃字段，不会再返回标签，详情中才会返回标签信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::vector<std::string> GetTags() const;

                    /**
                     * 设置特性标签，已废弃字段，不会再返回标签，详情中才会返回标签信息
注意：此字段可能返回 null，表示取不到有效值。
                     * @param Tags 特性标签，已废弃字段，不会再返回标签，详情中才会返回标签信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    void SetTags(const std::vector<std::string>& _tags);

                    /**
                     * 判断参数 Tags 是否已赋值
                     * @return Tags 是否已赋值
                     */
                    bool TagsHasBeenSet() const;

                    /**
                     * 获取首次运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     * @return FileCreateTime 首次运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::string GetFileCreateTime() const;

                    /**
                     * 设置首次运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     * @param FileCreateTime 首次运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    void SetFileCreateTime(const std::string& _fileCreateTime);

                    /**
                     * 判断参数 FileCreateTime 是否已赋值
                     * @return FileCreateTime 是否已赋值
                     */
                    bool FileCreateTimeHasBeenSet() const;

                    /**
                     * 获取最近运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     * @return FileModifierTime 最近运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::string GetFileModifierTime() const;

                    /**
                     * 设置最近运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     * @param FileModifierTime 最近运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    void SetFileModifierTime(const std::string& _fileModifierTime);

                    /**
                     * 判断参数 FileModifierTime 是否已赋值
                     * @return FileModifierTime 是否已赋值
                     */
                    bool FileModifierTimeHasBeenSet() const;

                    /**
                     * 获取创建时间
                     * @return CreateTime 创建时间
                     */
                    std::string GetCreateTime() const;

                    /**
                     * 设置创建时间
                     * @param CreateTime 创建时间
                     */
                    void SetCreateTime(const std::string& _createTime);

                    /**
                     * 判断参数 CreateTime 是否已赋值
                     * @return CreateTime 是否已赋值
                     */
                    bool CreateTimeHasBeenSet() const;

                    /**
                     * 获取最近扫描时间
                     * @return LatestScanTime 最近扫描时间
                     */
                    std::string GetLatestScanTime() const;

                    /**
                     * 设置最近扫描时间
                     * @param LatestScanTime 最近扫描时间
                     */
                    void SetLatestScanTime(const std::string& _latestScanTime);

                    /**
                     * 判断参数 LatestScanTime 是否已赋值
                     * @return LatestScanTime 是否已赋值
                     */
                    bool LatestScanTimeHasBeenSet() const;

                    /**
                     * 获取风险等级 0未知、1低、2中、3高、4严重
                     * @return Level 风险等级 0未知、1低、2中、3高、4严重
                     */
                    uint64_t GetLevel() const;

                    /**
                     * 设置风险等级 0未知、1低、2中、3高、4严重
                     * @param Level 风险等级 0未知、1低、2中、3高、4严重
                     */
                    void SetLevel(const uint64_t& _level);

                    /**
                     * 判断参数 Level 是否已赋值
                     * @return Level 是否已赋值
                     */
                    bool LevelHasBeenSet() const;

                    /**
                     * 获取'木马检测平台用,分割 1云查杀引擎、2TAV、3binaryAi、4异常行为、5威胁情报
                     * @return CheckPlatform '木马检测平台用,分割 1云查杀引擎、2TAV、3binaryAi、4异常行为、5威胁情报
                     */
                    std::string GetCheckPlatform() const;

                    /**
                     * 设置'木马检测平台用,分割 1云查杀引擎、2TAV、3binaryAi、4异常行为、5威胁情报
                     * @param CheckPlatform '木马检测平台用,分割 1云查杀引擎、2TAV、3binaryAi、4异常行为、5威胁情报
                     */
                    void SetCheckPlatform(const std::string& _checkPlatform);

                    /**
                     * 判断参数 CheckPlatform 是否已赋值
                     * @return CheckPlatform 是否已赋值
                     */
                    bool CheckPlatformHasBeenSet() const;

                    /**
                     * 获取木马进程是否存在 0:不存在，1:存在
                     * @return ProcessExists 木马进程是否存在 0:不存在，1:存在
                     */
                    uint64_t GetProcessExists() const;

                    /**
                     * 设置木马进程是否存在 0:不存在，1:存在
                     * @param ProcessExists 木马进程是否存在 0:不存在，1:存在
                     */
                    void SetProcessExists(const uint64_t& _processExists);

                    /**
                     * 判断参数 ProcessExists 是否已赋值
                     * @return ProcessExists 是否已赋值
                     */
                    bool ProcessExistsHasBeenSet() const;

                    /**
                     * 获取木马文件是否存在 0:不存在，1:存在
                     * @return FileExists 木马文件是否存在 0:不存在，1:存在
                     */
                    uint64_t GetFileExists() const;

                    /**
                     * 设置木马文件是否存在 0:不存在，1:存在
                     * @param FileExists 木马文件是否存在 0:不存在，1:存在
                     */
                    void SetFileExists(const uint64_t& _fileExists);

                    /**
                     * 判断参数 FileExists 是否已赋值
                     * @return FileExists 是否已赋值
                     */
                    bool FileExistsHasBeenSet() const;

                private:

                    /**
                     * 服务器ip
                     */
                    std::string m_hostIp;
                    bool m_hostIpHasBeenSet;

                    /**
                     * 唯一UUID
                     */
                    std::string m_uuid;
                    bool m_uuidHasBeenSet;

                    /**
                     * 路径
                     */
                    std::string m_filePath;
                    bool m_filePathHasBeenSet;

                    /**
                     * 描述
                     */
                    std::string m_virusName;
                    bool m_virusNameHasBeenSet;

                    /**
                     * 状态；4-:待处理，5-已信任，6-已隔离，8-文件已删除
                     */
                    uint64_t m_status;
                    bool m_statusHasBeenSet;

                    /**
                     * 唯一ID
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    uint64_t m_id;
                    bool m_idHasBeenSet;

                    /**
                     * 主机别名
                     */
                    std::string m_alias;
                    bool m_aliasHasBeenSet;

                    /**
                     * 特性标签，已废弃字段，不会再返回标签，详情中才会返回标签信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::vector<std::string> m_tags;
                    bool m_tagsHasBeenSet;

                    /**
                     * 首次运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::string m_fileCreateTime;
                    bool m_fileCreateTimeHasBeenSet;

                    /**
                     * 最近运行时间
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::string m_fileModifierTime;
                    bool m_fileModifierTimeHasBeenSet;

                    /**
                     * 创建时间
                     */
                    std::string m_createTime;
                    bool m_createTimeHasBeenSet;

                    /**
                     * 最近扫描时间
                     */
                    std::string m_latestScanTime;
                    bool m_latestScanTimeHasBeenSet;

                    /**
                     * 风险等级 0未知、1低、2中、3高、4严重
                     */
                    uint64_t m_level;
                    bool m_levelHasBeenSet;

                    /**
                     * '木马检测平台用,分割 1云查杀引擎、2TAV、3binaryAi、4异常行为、5威胁情报
                     */
                    std::string m_checkPlatform;
                    bool m_checkPlatformHasBeenSet;

                    /**
                     * 木马进程是否存在 0:不存在，1:存在
                     */
                    uint64_t m_processExists;
                    bool m_processExistsHasBeenSet;

                    /**
                     * 木马文件是否存在 0:不存在，1:存在
                     */
                    uint64_t m_fileExists;
                    bool m_fileExistsHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_MALWARELIST_H_
