/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWAREWHITELISTREQUEST_H_
#define TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWAREWHITELISTREQUEST_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Cwp
    {
        namespace V20180228
        {
            namespace Model
            {
                /**
                * ModifyMalwareWhiteList请求参数结构体
                */
                class ModifyMalwareWhiteListRequest : public AbstractModel
                {
                public:
                    ModifyMalwareWhiteListRequest();
                    ~ModifyMalwareWhiteListRequest() = default;
                    std::string ToJsonString() const;


                    /**
                     * 获取白名单模式； 0MD5白名单，1自定义
                     * @return Mode 白名单模式； 0MD5白名单，1自定义
                     * 
                     */
                    uint64_t GetMode() const;

                    /**
                     * 设置白名单模式； 0MD5白名单，1自定义
                     * @param _mode 白名单模式； 0MD5白名单，1自定义
                     * 
                     */
                    void SetMode(const uint64_t& _mode);

                    /**
                     * 判断参数 Mode 是否已赋值
                     * @return Mode 是否已赋值
                     * 
                     */
                    bool ModeHasBeenSet() const;

                    /**
                     * 获取规则唯一ID
                     * @return Id 规则唯一ID
                     * 
                     */
                    uint64_t GetId() const;

                    /**
                     * 设置规则唯一ID
                     * @param _id 规则唯一ID
                     * 
                     */
                    void SetId(const uint64_t& _id);

                    /**
                     * 判断参数 Id 是否已赋值
                     * @return Id 是否已赋值
                     * 
                     */
                    bool IdHasBeenSet() const;

                    /**
                     * 获取quuid 列表
                     * @return QuuidList quuid 列表
                     * 
                     */
                    std::vector<std::string> GetQuuidList() const;

                    /**
                     * 设置quuid 列表
                     * @param _quuidList quuid 列表
                     * 
                     */
                    void SetQuuidList(const std::vector<std::string>& _quuidList);

                    /**
                     * 判断参数 QuuidList 是否已赋值
                     * @return QuuidList 是否已赋值
                     * 
                     */
                    bool QuuidListHasBeenSet() const;

                    /**
                     * 获取是否全部主机； 0否，1是。
                     * @return IsGlobal 是否全部主机； 0否，1是。
                     * 
                     */
                    uint64_t GetIsGlobal() const;

                    /**
                     * 设置是否全部主机； 0否，1是。
                     * @param _isGlobal 是否全部主机； 0否，1是。
                     * 
                     */
                    void SetIsGlobal(const uint64_t& _isGlobal);

                    /**
                     * 判断参数 IsGlobal 是否已赋值
                     * @return IsGlobal 是否已赋值
                     * 
                     */
                    bool IsGlobalHasBeenSet() const;

                    /**
                     * 获取匹配模式 ；0 精确匹配，1模糊匹配(废弃)
                     * @return MatchType 匹配模式 ；0 精确匹配，1模糊匹配(废弃)
                     * 
                     */
                    uint64_t GetMatchType() const;

                    /**
                     * 设置匹配模式 ；0 精确匹配，1模糊匹配(废弃)
                     * @param _matchType 匹配模式 ；0 精确匹配，1模糊匹配(废弃)
                     * 
                     */
                    void SetMatchType(const uint64_t& _matchType);

                    /**
                     * 判断参数 MatchType 是否已赋值
                     * @return MatchType 是否已赋值
                     * 
                     */
                    bool MatchTypeHasBeenSet() const;

                    /**
                     * 获取文件名称(正则)；长度不超过200个
                     * @return FileName 文件名称(正则)；长度不超过200个
                     * 
                     */
                    std::vector<std::string> GetFileName() const;

                    /**
                     * 设置文件名称(正则)；长度不超过200个
                     * @param _fileName 文件名称(正则)；长度不超过200个
                     * 
                     */
                    void SetFileName(const std::vector<std::string>& _fileName);

                    /**
                     * 判断参数 FileName 是否已赋值
                     * @return FileName 是否已赋值
                     * 
                     */
                    bool FileNameHasBeenSet() const;

                    /**
                     * 获取文件目录(正则)；长度不超过200个，内容base64转义
                     * @return FileDirectory 文件目录(正则)；长度不超过200个，内容base64转义
                     * 
                     */
                    std::vector<std::string> GetFileDirectory() const;

                    /**
                     * 设置文件目录(正则)；长度不超过200个，内容base64转义
                     * @param _fileDirectory 文件目录(正则)；长度不超过200个，内容base64转义
                     * 
                     */
                    void SetFileDirectory(const std::vector<std::string>& _fileDirectory);

                    /**
                     * 判断参数 FileDirectory 是否已赋值
                     * @return FileDirectory 是否已赋值
                     * 
                     */
                    bool FileDirectoryHasBeenSet() const;

                    /**
                     * 获取文件后缀；长度不超过200个，内容base64转义（废弃）
                     * @return FileExtension 文件后缀；长度不超过200个，内容base64转义（废弃）
                     * 
                     */
                    std::vector<std::string> GetFileExtension() const;

                    /**
                     * 设置文件后缀；长度不超过200个，内容base64转义（废弃）
                     * @param _fileExtension 文件后缀；长度不超过200个，内容base64转义（废弃）
                     * 
                     */
                    void SetFileExtension(const std::vector<std::string>& _fileExtension);

                    /**
                     * 判断参数 FileExtension 是否已赋值
                     * @return FileExtension 是否已赋值
                     * 
                     */
                    bool FileExtensionHasBeenSet() const;

                    /**
                     * 获取MD5列表
                     * @return Md5List MD5列表
                     * 
                     */
                    std::vector<std::string> GetMd5List() const;

                    /**
                     * 设置MD5列表
                     * @param _md5List MD5列表
                     * 
                     */
                    void SetMd5List(const std::vector<std::string>& _md5List);

                    /**
                     * 判断参数 Md5List 是否已赋值
                     * @return Md5List 是否已赋值
                     * 
                     */
                    bool Md5ListHasBeenSet() const;

                private:

                    /**
                     * 白名单模式； 0MD5白名单，1自定义
                     */
                    uint64_t m_mode;
                    bool m_modeHasBeenSet;

                    /**
                     * 规则唯一ID
                     */
                    uint64_t m_id;
                    bool m_idHasBeenSet;

                    /**
                     * quuid 列表
                     */
                    std::vector<std::string> m_quuidList;
                    bool m_quuidListHasBeenSet;

                    /**
                     * 是否全部主机； 0否，1是。
                     */
                    uint64_t m_isGlobal;
                    bool m_isGlobalHasBeenSet;

                    /**
                     * 匹配模式 ；0 精确匹配，1模糊匹配(废弃)
                     */
                    uint64_t m_matchType;
                    bool m_matchTypeHasBeenSet;

                    /**
                     * 文件名称(正则)；长度不超过200个
                     */
                    std::vector<std::string> m_fileName;
                    bool m_fileNameHasBeenSet;

                    /**
                     * 文件目录(正则)；长度不超过200个，内容base64转义
                     */
                    std::vector<std::string> m_fileDirectory;
                    bool m_fileDirectoryHasBeenSet;

                    /**
                     * 文件后缀；长度不超过200个，内容base64转义（废弃）
                     */
                    std::vector<std::string> m_fileExtension;
                    bool m_fileExtensionHasBeenSet;

                    /**
                     * MD5列表
                     */
                    std::vector<std::string> m_md5List;
                    bool m_md5ListHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_CWP_V20180228_MODEL_MODIFYMALWAREWHITELISTREQUEST_H_
