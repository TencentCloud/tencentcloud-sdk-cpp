/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/cwp/v20180228/model/DescribeScanMalwareScheduleResponse.h>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Cwp::V20180228::Model;
using namespace std;

DescribeScanMalwareScheduleResponse::DescribeScanMalwareScheduleResponse() :
    m_scheduleHasBeenSet(false),
    m_riskFileNumberHasBeenSet(false),
    m_isScheduleHasBeenSet(false),
    m_scanStatusHasBeenSet(false)
{
}

CoreInternalOutcome DescribeScanMalwareScheduleResponse::Deserialize(const string &payload)
{
    rapidjson::Document d;
    d.Parse(payload.c_str());
    if (d.HasParseError() || !d.IsObject())
    {
        return CoreInternalOutcome(Core::Error("response not json format"));
    }
    if (!d.HasMember("Response") || !d["Response"].IsObject())
    {
        return CoreInternalOutcome(Core::Error("response `Response` is null or not object"));
    }
    rapidjson::Value &rsp = d["Response"];
    if (!rsp.HasMember("RequestId") || !rsp["RequestId"].IsString())
    {
        return CoreInternalOutcome(Core::Error("response `Response.RequestId` is null or not string"));
    }
    string requestId(rsp["RequestId"].GetString());
    SetRequestId(requestId);

    if (rsp.HasMember("Error"))
    {
        if (!rsp["Error"].IsObject() ||
            !rsp["Error"].HasMember("Code") || !rsp["Error"]["Code"].IsString() ||
            !rsp["Error"].HasMember("Message") || !rsp["Error"]["Message"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `Response.Error` format error").SetRequestId(requestId));
        }
        string errorCode(rsp["Error"]["Code"].GetString());
        string errorMsg(rsp["Error"]["Message"].GetString());
        return CoreInternalOutcome(Core::Error(errorCode, errorMsg).SetRequestId(requestId));
    }


    if (rsp.HasMember("Schedule") && !rsp["Schedule"].IsNull())
    {
        if (!rsp["Schedule"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `Schedule` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_schedule = rsp["Schedule"].GetInt64();
        m_scheduleHasBeenSet = true;
    }

    if (rsp.HasMember("RiskFileNumber") && !rsp["RiskFileNumber"].IsNull())
    {
        if (!rsp["RiskFileNumber"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `RiskFileNumber` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_riskFileNumber = rsp["RiskFileNumber"].GetInt64();
        m_riskFileNumberHasBeenSet = true;
    }

    if (rsp.HasMember("IsSchedule") && !rsp["IsSchedule"].IsNull())
    {
        if (!rsp["IsSchedule"].IsBool())
        {
            return CoreInternalOutcome(Core::Error("response `IsSchedule` IsBool=false incorrectly").SetRequestId(requestId));
        }
        m_isSchedule = rsp["IsSchedule"].GetBool();
        m_isScheduleHasBeenSet = true;
    }

    if (rsp.HasMember("ScanStatus") && !rsp["ScanStatus"].IsNull())
    {
        if (!rsp["ScanStatus"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `ScanStatus` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_scanStatus = rsp["ScanStatus"].GetUint64();
        m_scanStatusHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

string DescribeScanMalwareScheduleResponse::ToJsonString() const
{
    rapidjson::Document value;
    value.SetObject();
    rapidjson::Document::AllocatorType& allocator = value.GetAllocator();

    if (m_scheduleHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Schedule";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_schedule, allocator);
    }

    if (m_riskFileNumberHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "RiskFileNumber";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_riskFileNumber, allocator);
    }

    if (m_isScheduleHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "IsSchedule";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_isSchedule, allocator);
    }

    if (m_scanStatusHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ScanStatus";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_scanStatus, allocator);
    }

    rapidjson::Value iKey(rapidjson::kStringType);
    string key = "RequestId";
    iKey.SetString(key.c_str(), allocator);
    value.AddMember(iKey, rapidjson::Value().SetString(GetRequestId().c_str(), allocator), allocator);

    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    value.Accept(writer);
    return buffer.GetString();
}


int64_t DescribeScanMalwareScheduleResponse::GetSchedule() const
{
    return m_schedule;
}

bool DescribeScanMalwareScheduleResponse::ScheduleHasBeenSet() const
{
    return m_scheduleHasBeenSet;
}

int64_t DescribeScanMalwareScheduleResponse::GetRiskFileNumber() const
{
    return m_riskFileNumber;
}

bool DescribeScanMalwareScheduleResponse::RiskFileNumberHasBeenSet() const
{
    return m_riskFileNumberHasBeenSet;
}

bool DescribeScanMalwareScheduleResponse::GetIsSchedule() const
{
    return m_isSchedule;
}

bool DescribeScanMalwareScheduleResponse::IsScheduleHasBeenSet() const
{
    return m_isScheduleHasBeenSet;
}

uint64_t DescribeScanMalwareScheduleResponse::GetScanStatus() const
{
    return m_scanStatus;
}

bool DescribeScanMalwareScheduleResponse::ScanStatusHasBeenSet() const
{
    return m_scanStatusHasBeenSet;
}


