/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/cwp/v20180228/model/ModifyMalwareWhiteListRequest.h>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>

using namespace TencentCloud::Cwp::V20180228::Model;
using namespace std;

ModifyMalwareWhiteListRequest::ModifyMalwareWhiteListRequest() :
    m_modeHasBeenSet(false),
    m_idHasBeenSet(false),
    m_quuidListHasBeenSet(false),
    m_isGlobalHasBeenSet(false),
    m_matchTypeHasBeenSet(false),
    m_fileNameHasBeenSet(false),
    m_fileDirectoryHasBeenSet(false),
    m_fileExtensionHasBeenSet(false),
    m_md5ListHasBeenSet(false)
{
}

string ModifyMalwareWhiteListRequest::ToJsonString() const
{
    rapidjson::Document d;
    d.SetObject();
    rapidjson::Document::AllocatorType& allocator = d.GetAllocator();


    if (m_modeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Mode";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_mode, allocator);
    }

    if (m_idHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Id";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_id, allocator);
    }

    if (m_quuidListHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "QuuidList";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_quuidList.begin(); itr != m_quuidList.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_isGlobalHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "IsGlobal";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_isGlobal, allocator);
    }

    if (m_matchTypeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "MatchType";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_matchType, allocator);
    }

    if (m_fileNameHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileName";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_fileName.begin(); itr != m_fileName.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_fileDirectoryHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileDirectory";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_fileDirectory.begin(); itr != m_fileDirectory.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_fileExtensionHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileExtension";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_fileExtension.begin(); itr != m_fileExtension.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_md5ListHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Md5List";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_md5List.begin(); itr != m_md5List.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }


    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    d.Accept(writer);
    return buffer.GetString();
}


uint64_t ModifyMalwareWhiteListRequest::GetMode() const
{
    return m_mode;
}

void ModifyMalwareWhiteListRequest::SetMode(const uint64_t& _mode)
{
    m_mode = _mode;
    m_modeHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::ModeHasBeenSet() const
{
    return m_modeHasBeenSet;
}

uint64_t ModifyMalwareWhiteListRequest::GetId() const
{
    return m_id;
}

void ModifyMalwareWhiteListRequest::SetId(const uint64_t& _id)
{
    m_id = _id;
    m_idHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::IdHasBeenSet() const
{
    return m_idHasBeenSet;
}

vector<string> ModifyMalwareWhiteListRequest::GetQuuidList() const
{
    return m_quuidList;
}

void ModifyMalwareWhiteListRequest::SetQuuidList(const vector<string>& _quuidList)
{
    m_quuidList = _quuidList;
    m_quuidListHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::QuuidListHasBeenSet() const
{
    return m_quuidListHasBeenSet;
}

uint64_t ModifyMalwareWhiteListRequest::GetIsGlobal() const
{
    return m_isGlobal;
}

void ModifyMalwareWhiteListRequest::SetIsGlobal(const uint64_t& _isGlobal)
{
    m_isGlobal = _isGlobal;
    m_isGlobalHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::IsGlobalHasBeenSet() const
{
    return m_isGlobalHasBeenSet;
}

uint64_t ModifyMalwareWhiteListRequest::GetMatchType() const
{
    return m_matchType;
}

void ModifyMalwareWhiteListRequest::SetMatchType(const uint64_t& _matchType)
{
    m_matchType = _matchType;
    m_matchTypeHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::MatchTypeHasBeenSet() const
{
    return m_matchTypeHasBeenSet;
}

vector<string> ModifyMalwareWhiteListRequest::GetFileName() const
{
    return m_fileName;
}

void ModifyMalwareWhiteListRequest::SetFileName(const vector<string>& _fileName)
{
    m_fileName = _fileName;
    m_fileNameHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::FileNameHasBeenSet() const
{
    return m_fileNameHasBeenSet;
}

vector<string> ModifyMalwareWhiteListRequest::GetFileDirectory() const
{
    return m_fileDirectory;
}

void ModifyMalwareWhiteListRequest::SetFileDirectory(const vector<string>& _fileDirectory)
{
    m_fileDirectory = _fileDirectory;
    m_fileDirectoryHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::FileDirectoryHasBeenSet() const
{
    return m_fileDirectoryHasBeenSet;
}

vector<string> ModifyMalwareWhiteListRequest::GetFileExtension() const
{
    return m_fileExtension;
}

void ModifyMalwareWhiteListRequest::SetFileExtension(const vector<string>& _fileExtension)
{
    m_fileExtension = _fileExtension;
    m_fileExtensionHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::FileExtensionHasBeenSet() const
{
    return m_fileExtensionHasBeenSet;
}

vector<string> ModifyMalwareWhiteListRequest::GetMd5List() const
{
    return m_md5List;
}

void ModifyMalwareWhiteListRequest::SetMd5List(const vector<string>& _md5List)
{
    m_md5List = _md5List;
    m_md5ListHasBeenSet = true;
}

bool ModifyMalwareWhiteListRequest::Md5ListHasBeenSet() const
{
    return m_md5ListHasBeenSet;
}


