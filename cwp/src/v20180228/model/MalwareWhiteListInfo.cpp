/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/cwp/v20180228/model/MalwareWhiteListInfo.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Cwp::V20180228::Model;
using namespace std;

MalwareWhiteListInfo::MalwareWhiteListInfo() :
    m_idHasBeenSet(false),
    m_quuidListHasBeenSet(false),
    m_md5ListHasBeenSet(false),
    m_isGlobalHasBeenSet(false),
    m_modeHasBeenSet(false),
    m_matchTypeHasBeenSet(false),
    m_fileNameHasBeenSet(false),
    m_fileDirectoryHasBeenSet(false),
    m_fileExtensionHasBeenSet(false),
    m_createTimeHasBeenSet(false),
    m_eventsCountHasBeenSet(false)
{
}

CoreInternalOutcome MalwareWhiteListInfo::Deserialize(const rapidjson::Value &value)
{
    string requestId = "";


    if (value.HasMember("Id") && !value["Id"].IsNull())
    {
        if (!value["Id"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.Id` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_id = value["Id"].GetUint64();
        m_idHasBeenSet = true;
    }

    if (value.HasMember("QuuidList") && !value["QuuidList"].IsNull())
    {
        if (!value["QuuidList"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.QuuidList` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_quuidList = string(value["QuuidList"].GetString());
        m_quuidListHasBeenSet = true;
    }

    if (value.HasMember("Md5List") && !value["Md5List"].IsNull())
    {
        if (!value["Md5List"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.Md5List` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_md5List = string(value["Md5List"].GetString());
        m_md5ListHasBeenSet = true;
    }

    if (value.HasMember("IsGlobal") && !value["IsGlobal"].IsNull())
    {
        if (!value["IsGlobal"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.IsGlobal` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_isGlobal = value["IsGlobal"].GetUint64();
        m_isGlobalHasBeenSet = true;
    }

    if (value.HasMember("Mode") && !value["Mode"].IsNull())
    {
        if (!value["Mode"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.Mode` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_mode = value["Mode"].GetUint64();
        m_modeHasBeenSet = true;
    }

    if (value.HasMember("MatchType") && !value["MatchType"].IsNull())
    {
        if (!value["MatchType"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.MatchType` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_matchType = value["MatchType"].GetUint64();
        m_matchTypeHasBeenSet = true;
    }

    if (value.HasMember("FileName") && !value["FileName"].IsNull())
    {
        if (!value["FileName"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.FileName` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_fileName = string(value["FileName"].GetString());
        m_fileNameHasBeenSet = true;
    }

    if (value.HasMember("FileDirectory") && !value["FileDirectory"].IsNull())
    {
        if (!value["FileDirectory"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.FileDirectory` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_fileDirectory = string(value["FileDirectory"].GetString());
        m_fileDirectoryHasBeenSet = true;
    }

    if (value.HasMember("FileExtension") && !value["FileExtension"].IsNull())
    {
        if (!value["FileExtension"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.FileExtension` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_fileExtension = string(value["FileExtension"].GetString());
        m_fileExtensionHasBeenSet = true;
    }

    if (value.HasMember("CreateTime") && !value["CreateTime"].IsNull())
    {
        if (!value["CreateTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.CreateTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_createTime = string(value["CreateTime"].GetString());
        m_createTimeHasBeenSet = true;
    }

    if (value.HasMember("EventsCount") && !value["EventsCount"].IsNull())
    {
        if (!value["EventsCount"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareWhiteListInfo.EventsCount` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_eventsCount = value["EventsCount"].GetUint64();
        m_eventsCountHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

void MalwareWhiteListInfo::ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const
{

    if (m_idHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Id";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_id, allocator);
    }

    if (m_quuidListHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "QuuidList";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_quuidList.c_str(), allocator).Move(), allocator);
    }

    if (m_md5ListHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Md5List";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_md5List.c_str(), allocator).Move(), allocator);
    }

    if (m_isGlobalHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "IsGlobal";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_isGlobal, allocator);
    }

    if (m_modeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Mode";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_mode, allocator);
    }

    if (m_matchTypeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "MatchType";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_matchType, allocator);
    }

    if (m_fileNameHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileName";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_fileName.c_str(), allocator).Move(), allocator);
    }

    if (m_fileDirectoryHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileDirectory";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_fileDirectory.c_str(), allocator).Move(), allocator);
    }

    if (m_fileExtensionHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileExtension";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_fileExtension.c_str(), allocator).Move(), allocator);
    }

    if (m_createTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CreateTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_createTime.c_str(), allocator).Move(), allocator);
    }

    if (m_eventsCountHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EventsCount";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_eventsCount, allocator);
    }

}


uint64_t MalwareWhiteListInfo::GetId() const
{
    return m_id;
}

void MalwareWhiteListInfo::SetId(const uint64_t& _id)
{
    m_id = _id;
    m_idHasBeenSet = true;
}

bool MalwareWhiteListInfo::IdHasBeenSet() const
{
    return m_idHasBeenSet;
}

string MalwareWhiteListInfo::GetQuuidList() const
{
    return m_quuidList;
}

void MalwareWhiteListInfo::SetQuuidList(const string& _quuidList)
{
    m_quuidList = _quuidList;
    m_quuidListHasBeenSet = true;
}

bool MalwareWhiteListInfo::QuuidListHasBeenSet() const
{
    return m_quuidListHasBeenSet;
}

string MalwareWhiteListInfo::GetMd5List() const
{
    return m_md5List;
}

void MalwareWhiteListInfo::SetMd5List(const string& _md5List)
{
    m_md5List = _md5List;
    m_md5ListHasBeenSet = true;
}

bool MalwareWhiteListInfo::Md5ListHasBeenSet() const
{
    return m_md5ListHasBeenSet;
}

uint64_t MalwareWhiteListInfo::GetIsGlobal() const
{
    return m_isGlobal;
}

void MalwareWhiteListInfo::SetIsGlobal(const uint64_t& _isGlobal)
{
    m_isGlobal = _isGlobal;
    m_isGlobalHasBeenSet = true;
}

bool MalwareWhiteListInfo::IsGlobalHasBeenSet() const
{
    return m_isGlobalHasBeenSet;
}

uint64_t MalwareWhiteListInfo::GetMode() const
{
    return m_mode;
}

void MalwareWhiteListInfo::SetMode(const uint64_t& _mode)
{
    m_mode = _mode;
    m_modeHasBeenSet = true;
}

bool MalwareWhiteListInfo::ModeHasBeenSet() const
{
    return m_modeHasBeenSet;
}

uint64_t MalwareWhiteListInfo::GetMatchType() const
{
    return m_matchType;
}

void MalwareWhiteListInfo::SetMatchType(const uint64_t& _matchType)
{
    m_matchType = _matchType;
    m_matchTypeHasBeenSet = true;
}

bool MalwareWhiteListInfo::MatchTypeHasBeenSet() const
{
    return m_matchTypeHasBeenSet;
}

string MalwareWhiteListInfo::GetFileName() const
{
    return m_fileName;
}

void MalwareWhiteListInfo::SetFileName(const string& _fileName)
{
    m_fileName = _fileName;
    m_fileNameHasBeenSet = true;
}

bool MalwareWhiteListInfo::FileNameHasBeenSet() const
{
    return m_fileNameHasBeenSet;
}

string MalwareWhiteListInfo::GetFileDirectory() const
{
    return m_fileDirectory;
}

void MalwareWhiteListInfo::SetFileDirectory(const string& _fileDirectory)
{
    m_fileDirectory = _fileDirectory;
    m_fileDirectoryHasBeenSet = true;
}

bool MalwareWhiteListInfo::FileDirectoryHasBeenSet() const
{
    return m_fileDirectoryHasBeenSet;
}

string MalwareWhiteListInfo::GetFileExtension() const
{
    return m_fileExtension;
}

void MalwareWhiteListInfo::SetFileExtension(const string& _fileExtension)
{
    m_fileExtension = _fileExtension;
    m_fileExtensionHasBeenSet = true;
}

bool MalwareWhiteListInfo::FileExtensionHasBeenSet() const
{
    return m_fileExtensionHasBeenSet;
}

string MalwareWhiteListInfo::GetCreateTime() const
{
    return m_createTime;
}

void MalwareWhiteListInfo::SetCreateTime(const string& _createTime)
{
    m_createTime = _createTime;
    m_createTimeHasBeenSet = true;
}

bool MalwareWhiteListInfo::CreateTimeHasBeenSet() const
{
    return m_createTimeHasBeenSet;
}

uint64_t MalwareWhiteListInfo::GetEventsCount() const
{
    return m_eventsCount;
}

void MalwareWhiteListInfo::SetEventsCount(const uint64_t& _eventsCount)
{
    m_eventsCount = _eventsCount;
    m_eventsCountHasBeenSet = true;
}

bool MalwareWhiteListInfo::EventsCountHasBeenSet() const
{
    return m_eventsCountHasBeenSet;
}

