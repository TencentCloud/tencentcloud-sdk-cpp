/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/cwp/v20180228/model/CreateScanMalwareSettingRequest.h>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>

using namespace TencentCloud::Cwp::V20180228::Model;
using namespace std;

CreateScanMalwareSettingRequest::CreateScanMalwareSettingRequest() :
    m_scanPatternHasBeenSet(false),
    m_hostTypeHasBeenSet(false),
    m_quuidListHasBeenSet(false),
    m_timeoutPeriodHasBeenSet(false),
    m_engineTypeHasBeenSet(false),
    m_enableMemShellScanHasBeenSet(false)
{
}

string CreateScanMalwareSettingRequest::ToJsonString() const
{
    rapidjson::Document d;
    d.SetObject();
    rapidjson::Document::AllocatorType& allocator = d.GetAllocator();


    if (m_scanPatternHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ScanPattern";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_scanPattern, allocator);
    }

    if (m_hostTypeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "HostType";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_hostType, allocator);
    }

    if (m_quuidListHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "QuuidList";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_quuidList.begin(); itr != m_quuidList.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_timeoutPeriodHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "TimeoutPeriod";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_timeoutPeriod, allocator);
    }

    if (m_engineTypeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EngineType";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_engineType, allocator);
    }

    if (m_enableMemShellScanHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EnableMemShellScan";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, m_enableMemShellScan, allocator);
    }


    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    d.Accept(writer);
    return buffer.GetString();
}


uint64_t CreateScanMalwareSettingRequest::GetScanPattern() const
{
    return m_scanPattern;
}

void CreateScanMalwareSettingRequest::SetScanPattern(const uint64_t& _scanPattern)
{
    m_scanPattern = _scanPattern;
    m_scanPatternHasBeenSet = true;
}

bool CreateScanMalwareSettingRequest::ScanPatternHasBeenSet() const
{
    return m_scanPatternHasBeenSet;
}

int64_t CreateScanMalwareSettingRequest::GetHostType() const
{
    return m_hostType;
}

void CreateScanMalwareSettingRequest::SetHostType(const int64_t& _hostType)
{
    m_hostType = _hostType;
    m_hostTypeHasBeenSet = true;
}

bool CreateScanMalwareSettingRequest::HostTypeHasBeenSet() const
{
    return m_hostTypeHasBeenSet;
}

vector<string> CreateScanMalwareSettingRequest::GetQuuidList() const
{
    return m_quuidList;
}

void CreateScanMalwareSettingRequest::SetQuuidList(const vector<string>& _quuidList)
{
    m_quuidList = _quuidList;
    m_quuidListHasBeenSet = true;
}

bool CreateScanMalwareSettingRequest::QuuidListHasBeenSet() const
{
    return m_quuidListHasBeenSet;
}

uint64_t CreateScanMalwareSettingRequest::GetTimeoutPeriod() const
{
    return m_timeoutPeriod;
}

void CreateScanMalwareSettingRequest::SetTimeoutPeriod(const uint64_t& _timeoutPeriod)
{
    m_timeoutPeriod = _timeoutPeriod;
    m_timeoutPeriodHasBeenSet = true;
}

bool CreateScanMalwareSettingRequest::TimeoutPeriodHasBeenSet() const
{
    return m_timeoutPeriodHasBeenSet;
}

uint64_t CreateScanMalwareSettingRequest::GetEngineType() const
{
    return m_engineType;
}

void CreateScanMalwareSettingRequest::SetEngineType(const uint64_t& _engineType)
{
    m_engineType = _engineType;
    m_engineTypeHasBeenSet = true;
}

bool CreateScanMalwareSettingRequest::EngineTypeHasBeenSet() const
{
    return m_engineTypeHasBeenSet;
}

int64_t CreateScanMalwareSettingRequest::GetEnableMemShellScan() const
{
    return m_enableMemShellScan;
}

void CreateScanMalwareSettingRequest::SetEnableMemShellScan(const int64_t& _enableMemShellScan)
{
    m_enableMemShellScan = _enableMemShellScan;
    m_enableMemShellScanHasBeenSet = true;
}

bool CreateScanMalwareSettingRequest::EnableMemShellScanHasBeenSet() const
{
    return m_enableMemShellScanHasBeenSet;
}


