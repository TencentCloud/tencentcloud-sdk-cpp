/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/cwp/v20180228/model/MalWareList.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Cwp::V20180228::Model;
using namespace std;

MalWareList::MalWareList() :
    m_hostIpHasBeenSet(false),
    m_uuidHasBeenSet(false),
    m_filePathHasBeenSet(false),
    m_virusNameHasBeenSet(false),
    m_statusHasBeenSet(false),
    m_idHasBeenSet(false),
    m_aliasHasBeenSet(false),
    m_tagsHasBeenSet(false),
    m_fileCreateTimeHasBeenSet(false),
    m_fileModifierTimeHasBeenSet(false),
    m_createTimeHasBeenSet(false),
    m_latestScanTimeHasBeenSet(false),
    m_levelHasBeenSet(false),
    m_checkPlatformHasBeenSet(false),
    m_processExistsHasBeenSet(false),
    m_fileExistsHasBeenSet(false)
{
}

CoreInternalOutcome MalWareList::Deserialize(const rapidjson::Value &value)
{
    string requestId = "";


    if (value.HasMember("HostIp") && !value["HostIp"].IsNull())
    {
        if (!value["HostIp"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.HostIp` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_hostIp = string(value["HostIp"].GetString());
        m_hostIpHasBeenSet = true;
    }

    if (value.HasMember("Uuid") && !value["Uuid"].IsNull())
    {
        if (!value["Uuid"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.Uuid` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_uuid = string(value["Uuid"].GetString());
        m_uuidHasBeenSet = true;
    }

    if (value.HasMember("FilePath") && !value["FilePath"].IsNull())
    {
        if (!value["FilePath"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.FilePath` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_filePath = string(value["FilePath"].GetString());
        m_filePathHasBeenSet = true;
    }

    if (value.HasMember("VirusName") && !value["VirusName"].IsNull())
    {
        if (!value["VirusName"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.VirusName` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_virusName = string(value["VirusName"].GetString());
        m_virusNameHasBeenSet = true;
    }

    if (value.HasMember("Status") && !value["Status"].IsNull())
    {
        if (!value["Status"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.Status` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_status = value["Status"].GetUint64();
        m_statusHasBeenSet = true;
    }

    if (value.HasMember("Id") && !value["Id"].IsNull())
    {
        if (!value["Id"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.Id` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_id = value["Id"].GetUint64();
        m_idHasBeenSet = true;
    }

    if (value.HasMember("Alias") && !value["Alias"].IsNull())
    {
        if (!value["Alias"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.Alias` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_alias = string(value["Alias"].GetString());
        m_aliasHasBeenSet = true;
    }

    if (value.HasMember("Tags") && !value["Tags"].IsNull())
    {
        if (!value["Tags"].IsArray())
            return CoreInternalOutcome(Core::Error("response `MalWareList.Tags` is not array type"));

        const rapidjson::Value &tmpValue = value["Tags"];
        for (rapidjson::Value::ConstValueIterator itr = tmpValue.Begin(); itr != tmpValue.End(); ++itr)
        {
            m_tags.push_back((*itr).GetString());
        }
        m_tagsHasBeenSet = true;
    }

    if (value.HasMember("FileCreateTime") && !value["FileCreateTime"].IsNull())
    {
        if (!value["FileCreateTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.FileCreateTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_fileCreateTime = string(value["FileCreateTime"].GetString());
        m_fileCreateTimeHasBeenSet = true;
    }

    if (value.HasMember("FileModifierTime") && !value["FileModifierTime"].IsNull())
    {
        if (!value["FileModifierTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.FileModifierTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_fileModifierTime = string(value["FileModifierTime"].GetString());
        m_fileModifierTimeHasBeenSet = true;
    }

    if (value.HasMember("CreateTime") && !value["CreateTime"].IsNull())
    {
        if (!value["CreateTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.CreateTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_createTime = string(value["CreateTime"].GetString());
        m_createTimeHasBeenSet = true;
    }

    if (value.HasMember("LatestScanTime") && !value["LatestScanTime"].IsNull())
    {
        if (!value["LatestScanTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.LatestScanTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_latestScanTime = string(value["LatestScanTime"].GetString());
        m_latestScanTimeHasBeenSet = true;
    }

    if (value.HasMember("Level") && !value["Level"].IsNull())
    {
        if (!value["Level"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.Level` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_level = value["Level"].GetUint64();
        m_levelHasBeenSet = true;
    }

    if (value.HasMember("CheckPlatform") && !value["CheckPlatform"].IsNull())
    {
        if (!value["CheckPlatform"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.CheckPlatform` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_checkPlatform = string(value["CheckPlatform"].GetString());
        m_checkPlatformHasBeenSet = true;
    }

    if (value.HasMember("ProcessExists") && !value["ProcessExists"].IsNull())
    {
        if (!value["ProcessExists"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.ProcessExists` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_processExists = value["ProcessExists"].GetUint64();
        m_processExistsHasBeenSet = true;
    }

    if (value.HasMember("FileExists") && !value["FileExists"].IsNull())
    {
        if (!value["FileExists"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MalWareList.FileExists` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_fileExists = value["FileExists"].GetUint64();
        m_fileExistsHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

void MalWareList::ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const
{

    if (m_hostIpHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "HostIp";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_hostIp.c_str(), allocator).Move(), allocator);
    }

    if (m_uuidHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Uuid";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_uuid.c_str(), allocator).Move(), allocator);
    }

    if (m_filePathHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FilePath";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_filePath.c_str(), allocator).Move(), allocator);
    }

    if (m_virusNameHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "VirusName";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_virusName.c_str(), allocator).Move(), allocator);
    }

    if (m_statusHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Status";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_status, allocator);
    }

    if (m_idHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Id";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_id, allocator);
    }

    if (m_aliasHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Alias";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_alias.c_str(), allocator).Move(), allocator);
    }

    if (m_tagsHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Tags";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_tags.begin(); itr != m_tags.end(); ++itr)
        {
            value[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_fileCreateTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileCreateTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_fileCreateTime.c_str(), allocator).Move(), allocator);
    }

    if (m_fileModifierTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileModifierTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_fileModifierTime.c_str(), allocator).Move(), allocator);
    }

    if (m_createTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CreateTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_createTime.c_str(), allocator).Move(), allocator);
    }

    if (m_latestScanTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "LatestScanTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_latestScanTime.c_str(), allocator).Move(), allocator);
    }

    if (m_levelHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Level";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_level, allocator);
    }

    if (m_checkPlatformHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CheckPlatform";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_checkPlatform.c_str(), allocator).Move(), allocator);
    }

    if (m_processExistsHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ProcessExists";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_processExists, allocator);
    }

    if (m_fileExistsHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileExists";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_fileExists, allocator);
    }

}


string MalWareList::GetHostIp() const
{
    return m_hostIp;
}

void MalWareList::SetHostIp(const string& _hostIp)
{
    m_hostIp = _hostIp;
    m_hostIpHasBeenSet = true;
}

bool MalWareList::HostIpHasBeenSet() const
{
    return m_hostIpHasBeenSet;
}

string MalWareList::GetUuid() const
{
    return m_uuid;
}

void MalWareList::SetUuid(const string& _uuid)
{
    m_uuid = _uuid;
    m_uuidHasBeenSet = true;
}

bool MalWareList::UuidHasBeenSet() const
{
    return m_uuidHasBeenSet;
}

string MalWareList::GetFilePath() const
{
    return m_filePath;
}

void MalWareList::SetFilePath(const string& _filePath)
{
    m_filePath = _filePath;
    m_filePathHasBeenSet = true;
}

bool MalWareList::FilePathHasBeenSet() const
{
    return m_filePathHasBeenSet;
}

string MalWareList::GetVirusName() const
{
    return m_virusName;
}

void MalWareList::SetVirusName(const string& _virusName)
{
    m_virusName = _virusName;
    m_virusNameHasBeenSet = true;
}

bool MalWareList::VirusNameHasBeenSet() const
{
    return m_virusNameHasBeenSet;
}

uint64_t MalWareList::GetStatus() const
{
    return m_status;
}

void MalWareList::SetStatus(const uint64_t& _status)
{
    m_status = _status;
    m_statusHasBeenSet = true;
}

bool MalWareList::StatusHasBeenSet() const
{
    return m_statusHasBeenSet;
}

uint64_t MalWareList::GetId() const
{
    return m_id;
}

void MalWareList::SetId(const uint64_t& _id)
{
    m_id = _id;
    m_idHasBeenSet = true;
}

bool MalWareList::IdHasBeenSet() const
{
    return m_idHasBeenSet;
}

string MalWareList::GetAlias() const
{
    return m_alias;
}

void MalWareList::SetAlias(const string& _alias)
{
    m_alias = _alias;
    m_aliasHasBeenSet = true;
}

bool MalWareList::AliasHasBeenSet() const
{
    return m_aliasHasBeenSet;
}

vector<string> MalWareList::GetTags() const
{
    return m_tags;
}

void MalWareList::SetTags(const vector<string>& _tags)
{
    m_tags = _tags;
    m_tagsHasBeenSet = true;
}

bool MalWareList::TagsHasBeenSet() const
{
    return m_tagsHasBeenSet;
}

string MalWareList::GetFileCreateTime() const
{
    return m_fileCreateTime;
}

void MalWareList::SetFileCreateTime(const string& _fileCreateTime)
{
    m_fileCreateTime = _fileCreateTime;
    m_fileCreateTimeHasBeenSet = true;
}

bool MalWareList::FileCreateTimeHasBeenSet() const
{
    return m_fileCreateTimeHasBeenSet;
}

string MalWareList::GetFileModifierTime() const
{
    return m_fileModifierTime;
}

void MalWareList::SetFileModifierTime(const string& _fileModifierTime)
{
    m_fileModifierTime = _fileModifierTime;
    m_fileModifierTimeHasBeenSet = true;
}

bool MalWareList::FileModifierTimeHasBeenSet() const
{
    return m_fileModifierTimeHasBeenSet;
}

string MalWareList::GetCreateTime() const
{
    return m_createTime;
}

void MalWareList::SetCreateTime(const string& _createTime)
{
    m_createTime = _createTime;
    m_createTimeHasBeenSet = true;
}

bool MalWareList::CreateTimeHasBeenSet() const
{
    return m_createTimeHasBeenSet;
}

string MalWareList::GetLatestScanTime() const
{
    return m_latestScanTime;
}

void MalWareList::SetLatestScanTime(const string& _latestScanTime)
{
    m_latestScanTime = _latestScanTime;
    m_latestScanTimeHasBeenSet = true;
}

bool MalWareList::LatestScanTimeHasBeenSet() const
{
    return m_latestScanTimeHasBeenSet;
}

uint64_t MalWareList::GetLevel() const
{
    return m_level;
}

void MalWareList::SetLevel(const uint64_t& _level)
{
    m_level = _level;
    m_levelHasBeenSet = true;
}

bool MalWareList::LevelHasBeenSet() const
{
    return m_levelHasBeenSet;
}

string MalWareList::GetCheckPlatform() const
{
    return m_checkPlatform;
}

void MalWareList::SetCheckPlatform(const string& _checkPlatform)
{
    m_checkPlatform = _checkPlatform;
    m_checkPlatformHasBeenSet = true;
}

bool MalWareList::CheckPlatformHasBeenSet() const
{
    return m_checkPlatformHasBeenSet;
}

uint64_t MalWareList::GetProcessExists() const
{
    return m_processExists;
}

void MalWareList::SetProcessExists(const uint64_t& _processExists)
{
    m_processExists = _processExists;
    m_processExistsHasBeenSet = true;
}

bool MalWareList::ProcessExistsHasBeenSet() const
{
    return m_processExistsHasBeenSet;
}

uint64_t MalWareList::GetFileExists() const
{
    return m_fileExists;
}

void MalWareList::SetFileExists(const uint64_t& _fileExists)
{
    m_fileExists = _fileExists;
    m_fileExistsHasBeenSet = true;
}

bool MalWareList::FileExistsHasBeenSet() const
{
    return m_fileExistsHasBeenSet;
}

