/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/cwp/v20180228/model/MalwareRiskOverview.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Cwp::V20180228::Model;
using namespace std;

MalwareRiskOverview::MalwareRiskOverview() :
    m_hostCountHasBeenSet(false),
    m_processCountHasBeenSet(false),
    m_fileCountHasBeenSet(false),
    m_isFirstScanHasBeenSet(false),
    m_scanTimeHasBeenSet(false)
{
}

CoreInternalOutcome MalwareRiskOverview::Deserialize(const rapidjson::Value &value)
{
    string requestId = "";


    if (value.HasMember("HostCount") && !value["HostCount"].IsNull())
    {
        if (!value["HostCount"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareRiskOverview.HostCount` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_hostCount = value["HostCount"].GetInt64();
        m_hostCountHasBeenSet = true;
    }

    if (value.HasMember("ProcessCount") && !value["ProcessCount"].IsNull())
    {
        if (!value["ProcessCount"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareRiskOverview.ProcessCount` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_processCount = value["ProcessCount"].GetInt64();
        m_processCountHasBeenSet = true;
    }

    if (value.HasMember("FileCount") && !value["FileCount"].IsNull())
    {
        if (!value["FileCount"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareRiskOverview.FileCount` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_fileCount = value["FileCount"].GetInt64();
        m_fileCountHasBeenSet = true;
    }

    if (value.HasMember("IsFirstScan") && !value["IsFirstScan"].IsNull())
    {
        if (!value["IsFirstScan"].IsBool())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareRiskOverview.IsFirstScan` IsBool=false incorrectly").SetRequestId(requestId));
        }
        m_isFirstScan = value["IsFirstScan"].GetBool();
        m_isFirstScanHasBeenSet = true;
    }

    if (value.HasMember("ScanTime") && !value["ScanTime"].IsNull())
    {
        if (!value["ScanTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `MalwareRiskOverview.ScanTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_scanTime = string(value["ScanTime"].GetString());
        m_scanTimeHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

void MalwareRiskOverview::ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const
{

    if (m_hostCountHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "HostCount";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_hostCount, allocator);
    }

    if (m_processCountHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ProcessCount";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_processCount, allocator);
    }

    if (m_fileCountHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FileCount";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_fileCount, allocator);
    }

    if (m_isFirstScanHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "IsFirstScan";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_isFirstScan, allocator);
    }

    if (m_scanTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ScanTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_scanTime.c_str(), allocator).Move(), allocator);
    }

}


int64_t MalwareRiskOverview::GetHostCount() const
{
    return m_hostCount;
}

void MalwareRiskOverview::SetHostCount(const int64_t& _hostCount)
{
    m_hostCount = _hostCount;
    m_hostCountHasBeenSet = true;
}

bool MalwareRiskOverview::HostCountHasBeenSet() const
{
    return m_hostCountHasBeenSet;
}

int64_t MalwareRiskOverview::GetProcessCount() const
{
    return m_processCount;
}

void MalwareRiskOverview::SetProcessCount(const int64_t& _processCount)
{
    m_processCount = _processCount;
    m_processCountHasBeenSet = true;
}

bool MalwareRiskOverview::ProcessCountHasBeenSet() const
{
    return m_processCountHasBeenSet;
}

int64_t MalwareRiskOverview::GetFileCount() const
{
    return m_fileCount;
}

void MalwareRiskOverview::SetFileCount(const int64_t& _fileCount)
{
    m_fileCount = _fileCount;
    m_fileCountHasBeenSet = true;
}

bool MalwareRiskOverview::FileCountHasBeenSet() const
{
    return m_fileCountHasBeenSet;
}

bool MalwareRiskOverview::GetIsFirstScan() const
{
    return m_isFirstScan;
}

void MalwareRiskOverview::SetIsFirstScan(const bool& _isFirstScan)
{
    m_isFirstScan = _isFirstScan;
    m_isFirstScanHasBeenSet = true;
}

bool MalwareRiskOverview::IsFirstScanHasBeenSet() const
{
    return m_isFirstScanHasBeenSet;
}

string MalwareRiskOverview::GetScanTime() const
{
    return m_scanTime;
}

void MalwareRiskOverview::SetScanTime(const string& _scanTime)
{
    m_scanTime = _scanTime;
    m_scanTimeHasBeenSet = true;
}

bool MalwareRiskOverview::ScanTimeHasBeenSet() const
{
    return m_scanTimeHasBeenSet;
}

