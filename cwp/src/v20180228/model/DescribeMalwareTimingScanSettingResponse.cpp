/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/cwp/v20180228/model/DescribeMalwareTimingScanSettingResponse.h>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Cwp::V20180228::Model;
using namespace std;

DescribeMalwareTimingScanSettingResponse::DescribeMalwareTimingScanSettingResponse() :
    m_checkPatternHasBeenSet(false),
    m_startTimeHasBeenSet(false),
    m_endTimeHasBeenSet(false),
    m_isGlobalHasBeenSet(false),
    m_quuidListHasBeenSet(false),
    m_monitoringPatternHasBeenSet(false),
    m_cycleHasBeenSet(false),
    m_enableScanHasBeenSet(false),
    m_idHasBeenSet(false),
    m_realTimeMonitoringHasBeenSet(false),
    m_autoIsolationHasBeenSet(false),
    m_clickTimeoutHasBeenSet(false),
    m_killProcessHasBeenSet(false),
    m_engineTypeHasBeenSet(false),
    m_enableInspiredEngineHasBeenSet(false),
    m_enableMemShellScanHasBeenSet(false),
    m_protectModeHasBeenSet(false),
    m_protectFileScopeHasBeenSet(false)
{
}

CoreInternalOutcome DescribeMalwareTimingScanSettingResponse::Deserialize(const string &payload)
{
    rapidjson::Document d;
    d.Parse(payload.c_str());
    if (d.HasParseError() || !d.IsObject())
    {
        return CoreInternalOutcome(Core::Error("response not json format"));
    }
    if (!d.HasMember("Response") || !d["Response"].IsObject())
    {
        return CoreInternalOutcome(Core::Error("response `Response` is null or not object"));
    }
    rapidjson::Value &rsp = d["Response"];
    if (!rsp.HasMember("RequestId") || !rsp["RequestId"].IsString())
    {
        return CoreInternalOutcome(Core::Error("response `Response.RequestId` is null or not string"));
    }
    string requestId(rsp["RequestId"].GetString());
    SetRequestId(requestId);

    if (rsp.HasMember("Error"))
    {
        if (!rsp["Error"].IsObject() ||
            !rsp["Error"].HasMember("Code") || !rsp["Error"]["Code"].IsString() ||
            !rsp["Error"].HasMember("Message") || !rsp["Error"]["Message"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `Response.Error` format error").SetRequestId(requestId));
        }
        string errorCode(rsp["Error"]["Code"].GetString());
        string errorMsg(rsp["Error"]["Message"].GetString());
        return CoreInternalOutcome(Core::Error(errorCode, errorMsg).SetRequestId(requestId));
    }


    if (rsp.HasMember("CheckPattern") && !rsp["CheckPattern"].IsNull())
    {
        if (!rsp["CheckPattern"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `CheckPattern` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_checkPattern = rsp["CheckPattern"].GetUint64();
        m_checkPatternHasBeenSet = true;
    }

    if (rsp.HasMember("StartTime") && !rsp["StartTime"].IsNull())
    {
        if (!rsp["StartTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `StartTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_startTime = string(rsp["StartTime"].GetString());
        m_startTimeHasBeenSet = true;
    }

    if (rsp.HasMember("EndTime") && !rsp["EndTime"].IsNull())
    {
        if (!rsp["EndTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `EndTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_endTime = string(rsp["EndTime"].GetString());
        m_endTimeHasBeenSet = true;
    }

    if (rsp.HasMember("IsGlobal") && !rsp["IsGlobal"].IsNull())
    {
        if (!rsp["IsGlobal"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `IsGlobal` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_isGlobal = rsp["IsGlobal"].GetUint64();
        m_isGlobalHasBeenSet = true;
    }

    if (rsp.HasMember("QuuidList") && !rsp["QuuidList"].IsNull())
    {
        if (!rsp["QuuidList"].IsArray())
            return CoreInternalOutcome(Core::Error("response `QuuidList` is not array type"));

        const rapidjson::Value &tmpValue = rsp["QuuidList"];
        for (rapidjson::Value::ConstValueIterator itr = tmpValue.Begin(); itr != tmpValue.End(); ++itr)
        {
            m_quuidList.push_back((*itr).GetString());
        }
        m_quuidListHasBeenSet = true;
    }

    if (rsp.HasMember("MonitoringPattern") && !rsp["MonitoringPattern"].IsNull())
    {
        if (!rsp["MonitoringPattern"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `MonitoringPattern` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_monitoringPattern = rsp["MonitoringPattern"].GetUint64();
        m_monitoringPatternHasBeenSet = true;
    }

    if (rsp.HasMember("Cycle") && !rsp["Cycle"].IsNull())
    {
        if (!rsp["Cycle"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `Cycle` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_cycle = rsp["Cycle"].GetUint64();
        m_cycleHasBeenSet = true;
    }

    if (rsp.HasMember("EnableScan") && !rsp["EnableScan"].IsNull())
    {
        if (!rsp["EnableScan"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `EnableScan` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_enableScan = rsp["EnableScan"].GetInt64();
        m_enableScanHasBeenSet = true;
    }

    if (rsp.HasMember("Id") && !rsp["Id"].IsNull())
    {
        if (!rsp["Id"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `Id` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_id = rsp["Id"].GetInt64();
        m_idHasBeenSet = true;
    }

    if (rsp.HasMember("RealTimeMonitoring") && !rsp["RealTimeMonitoring"].IsNull())
    {
        if (!rsp["RealTimeMonitoring"].IsInt64())
        {
            return CoreInternalOutcome(Core::Error("response `RealTimeMonitoring` IsInt64=false incorrectly").SetRequestId(requestId));
        }
        m_realTimeMonitoring = rsp["RealTimeMonitoring"].GetInt64();
        m_realTimeMonitoringHasBeenSet = true;
    }

    if (rsp.HasMember("AutoIsolation") && !rsp["AutoIsolation"].IsNull())
    {
        if (!rsp["AutoIsolation"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `AutoIsolation` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_autoIsolation = rsp["AutoIsolation"].GetUint64();
        m_autoIsolationHasBeenSet = true;
    }

    if (rsp.HasMember("ClickTimeout") && !rsp["ClickTimeout"].IsNull())
    {
        if (!rsp["ClickTimeout"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `ClickTimeout` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_clickTimeout = rsp["ClickTimeout"].GetUint64();
        m_clickTimeoutHasBeenSet = true;
    }

    if (rsp.HasMember("KillProcess") && !rsp["KillProcess"].IsNull())
    {
        if (!rsp["KillProcess"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `KillProcess` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_killProcess = rsp["KillProcess"].GetUint64();
        m_killProcessHasBeenSet = true;
    }

    if (rsp.HasMember("EngineType") && !rsp["EngineType"].IsNull())
    {
        if (!rsp["EngineType"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `EngineType` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_engineType = rsp["EngineType"].GetUint64();
        m_engineTypeHasBeenSet = true;
    }

    if (rsp.HasMember("EnableInspiredEngine") && !rsp["EnableInspiredEngine"].IsNull())
    {
        if (!rsp["EnableInspiredEngine"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `EnableInspiredEngine` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_enableInspiredEngine = rsp["EnableInspiredEngine"].GetUint64();
        m_enableInspiredEngineHasBeenSet = true;
    }

    if (rsp.HasMember("EnableMemShellScan") && !rsp["EnableMemShellScan"].IsNull())
    {
        if (!rsp["EnableMemShellScan"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `EnableMemShellScan` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_enableMemShellScan = rsp["EnableMemShellScan"].GetUint64();
        m_enableMemShellScanHasBeenSet = true;
    }

    if (rsp.HasMember("ProtectMode") && !rsp["ProtectMode"].IsNull())
    {
        if (!rsp["ProtectMode"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `ProtectMode` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_protectMode = rsp["ProtectMode"].GetUint64();
        m_protectModeHasBeenSet = true;
    }

    if (rsp.HasMember("ProtectFileScope") && !rsp["ProtectFileScope"].IsNull())
    {
        if (!rsp["ProtectFileScope"].IsUint64())
        {
            return CoreInternalOutcome(Core::Error("response `ProtectFileScope` IsUint64=false incorrectly").SetRequestId(requestId));
        }
        m_protectFileScope = rsp["ProtectFileScope"].GetUint64();
        m_protectFileScopeHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

string DescribeMalwareTimingScanSettingResponse::ToJsonString() const
{
    rapidjson::Document value;
    value.SetObject();
    rapidjson::Document::AllocatorType& allocator = value.GetAllocator();

    if (m_checkPatternHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CheckPattern";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_checkPattern, allocator);
    }

    if (m_startTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "StartTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_startTime.c_str(), allocator).Move(), allocator);
    }

    if (m_endTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EndTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_endTime.c_str(), allocator).Move(), allocator);
    }

    if (m_isGlobalHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "IsGlobal";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_isGlobal, allocator);
    }

    if (m_quuidListHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "QuuidList";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_quuidList.begin(); itr != m_quuidList.end(); ++itr)
        {
            value[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_monitoringPatternHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "MonitoringPattern";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_monitoringPattern, allocator);
    }

    if (m_cycleHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Cycle";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_cycle, allocator);
    }

    if (m_enableScanHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EnableScan";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_enableScan, allocator);
    }

    if (m_idHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Id";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_id, allocator);
    }

    if (m_realTimeMonitoringHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "RealTimeMonitoring";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_realTimeMonitoring, allocator);
    }

    if (m_autoIsolationHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "AutoIsolation";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_autoIsolation, allocator);
    }

    if (m_clickTimeoutHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ClickTimeout";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_clickTimeout, allocator);
    }

    if (m_killProcessHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "KillProcess";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_killProcess, allocator);
    }

    if (m_engineTypeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EngineType";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_engineType, allocator);
    }

    if (m_enableInspiredEngineHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EnableInspiredEngine";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_enableInspiredEngine, allocator);
    }

    if (m_enableMemShellScanHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "EnableMemShellScan";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_enableMemShellScan, allocator);
    }

    if (m_protectModeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ProtectMode";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_protectMode, allocator);
    }

    if (m_protectFileScopeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ProtectFileScope";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_protectFileScope, allocator);
    }

    rapidjson::Value iKey(rapidjson::kStringType);
    string key = "RequestId";
    iKey.SetString(key.c_str(), allocator);
    value.AddMember(iKey, rapidjson::Value().SetString(GetRequestId().c_str(), allocator), allocator);
    
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    value.Accept(writer);
    return buffer.GetString();
}


uint64_t DescribeMalwareTimingScanSettingResponse::GetCheckPattern() const
{
    return m_checkPattern;
}

bool DescribeMalwareTimingScanSettingResponse::CheckPatternHasBeenSet() const
{
    return m_checkPatternHasBeenSet;
}

string DescribeMalwareTimingScanSettingResponse::GetStartTime() const
{
    return m_startTime;
}

bool DescribeMalwareTimingScanSettingResponse::StartTimeHasBeenSet() const
{
    return m_startTimeHasBeenSet;
}

string DescribeMalwareTimingScanSettingResponse::GetEndTime() const
{
    return m_endTime;
}

bool DescribeMalwareTimingScanSettingResponse::EndTimeHasBeenSet() const
{
    return m_endTimeHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetIsGlobal() const
{
    return m_isGlobal;
}

bool DescribeMalwareTimingScanSettingResponse::IsGlobalHasBeenSet() const
{
    return m_isGlobalHasBeenSet;
}

vector<string> DescribeMalwareTimingScanSettingResponse::GetQuuidList() const
{
    return m_quuidList;
}

bool DescribeMalwareTimingScanSettingResponse::QuuidListHasBeenSet() const
{
    return m_quuidListHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetMonitoringPattern() const
{
    return m_monitoringPattern;
}

bool DescribeMalwareTimingScanSettingResponse::MonitoringPatternHasBeenSet() const
{
    return m_monitoringPatternHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetCycle() const
{
    return m_cycle;
}

bool DescribeMalwareTimingScanSettingResponse::CycleHasBeenSet() const
{
    return m_cycleHasBeenSet;
}

int64_t DescribeMalwareTimingScanSettingResponse::GetEnableScan() const
{
    return m_enableScan;
}

bool DescribeMalwareTimingScanSettingResponse::EnableScanHasBeenSet() const
{
    return m_enableScanHasBeenSet;
}

int64_t DescribeMalwareTimingScanSettingResponse::GetId() const
{
    return m_id;
}

bool DescribeMalwareTimingScanSettingResponse::IdHasBeenSet() const
{
    return m_idHasBeenSet;
}

int64_t DescribeMalwareTimingScanSettingResponse::GetRealTimeMonitoring() const
{
    return m_realTimeMonitoring;
}

bool DescribeMalwareTimingScanSettingResponse::RealTimeMonitoringHasBeenSet() const
{
    return m_realTimeMonitoringHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetAutoIsolation() const
{
    return m_autoIsolation;
}

bool DescribeMalwareTimingScanSettingResponse::AutoIsolationHasBeenSet() const
{
    return m_autoIsolationHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetClickTimeout() const
{
    return m_clickTimeout;
}

bool DescribeMalwareTimingScanSettingResponse::ClickTimeoutHasBeenSet() const
{
    return m_clickTimeoutHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetKillProcess() const
{
    return m_killProcess;
}

bool DescribeMalwareTimingScanSettingResponse::KillProcessHasBeenSet() const
{
    return m_killProcessHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetEngineType() const
{
    return m_engineType;
}

bool DescribeMalwareTimingScanSettingResponse::EngineTypeHasBeenSet() const
{
    return m_engineTypeHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetEnableInspiredEngine() const
{
    return m_enableInspiredEngine;
}

bool DescribeMalwareTimingScanSettingResponse::EnableInspiredEngineHasBeenSet() const
{
    return m_enableInspiredEngineHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetEnableMemShellScan() const
{
    return m_enableMemShellScan;
}

bool DescribeMalwareTimingScanSettingResponse::EnableMemShellScanHasBeenSet() const
{
    return m_enableMemShellScanHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetProtectMode() const
{
    return m_protectMode;
}

bool DescribeMalwareTimingScanSettingResponse::ProtectModeHasBeenSet() const
{
    return m_protectModeHasBeenSet;
}

uint64_t DescribeMalwareTimingScanSettingResponse::GetProtectFileScope() const
{
    return m_protectFileScope;
}

bool DescribeMalwareTimingScanSettingResponse::ProtectFileScopeHasBeenSet() const
{
    return m_protectFileScopeHasBeenSet;
}


