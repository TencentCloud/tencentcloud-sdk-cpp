/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_BSCA_V20210811_MODEL_VULNERABILITYSUMMARY_H_
#define TENCENTCLOUD_BSCA_V20210811_MODEL_VULNERABILITYSUMMARY_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>


namespace TencentCloud
{
    namespace Bsca
    {
        namespace V20210811
        {
            namespace Model
            {
                /**
                * 描述漏洞的摘要信息。
                */
                class VulnerabilitySummary : public AbstractModel
                {
                public:
                    VulnerabilitySummary();
                    ~VulnerabilitySummary() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取漏洞ID
                     * @return VulID 漏洞ID
                     * 
                     */
                    std::string GetVulID() const;

                    /**
                     * 设置漏洞ID
                     * @param _vulID 漏洞ID
                     * 
                     */
                    void SetVulID(const std::string& _vulID);

                    /**
                     * 判断参数 VulID 是否已赋值
                     * @return VulID 是否已赋值
                     * 
                     */
                    bool VulIDHasBeenSet() const;

                    /**
                     * 获取漏洞所属CVE编号
                     * @return CVEID 漏洞所属CVE编号
                     * 
                     */
                    std::string GetCVEID() const;

                    /**
                     * 设置漏洞所属CVE编号
                     * @param _cVEID 漏洞所属CVE编号
                     * 
                     */
                    void SetCVEID(const std::string& _cVEID);

                    /**
                     * 判断参数 CVEID 是否已赋值
                     * @return CVEID 是否已赋值
                     * 
                     */
                    bool CVEIDHasBeenSet() const;

                    /**
                     * 获取漏洞所属CNVD编号
                     * @return CNVDID 漏洞所属CNVD编号
                     * 
                     */
                    std::string GetCNVDID() const;

                    /**
                     * 设置漏洞所属CNVD编号
                     * @param _cNVDID 漏洞所属CNVD编号
                     * 
                     */
                    void SetCNVDID(const std::string& _cNVDID);

                    /**
                     * 判断参数 CNVDID 是否已赋值
                     * @return CNVDID 是否已赋值
                     * 
                     */
                    bool CNVDIDHasBeenSet() const;

                    /**
                     * 获取漏洞所属CNNVD编号
                     * @return CNNVDID 漏洞所属CNNVD编号
                     * 
                     */
                    std::string GetCNNVDID() const;

                    /**
                     * 设置漏洞所属CNNVD编号
                     * @param _cNNVDID 漏洞所属CNNVD编号
                     * 
                     */
                    void SetCNNVDID(const std::string& _cNNVDID);

                    /**
                     * 判断参数 CNNVDID 是否已赋值
                     * @return CNNVDID 是否已赋值
                     * 
                     */
                    bool CNNVDIDHasBeenSet() const;

                    /**
                     * 获取漏洞名称
                     * @return Name 漏洞名称
                     * 
                     */
                    std::string GetName() const;

                    /**
                     * 设置漏洞名称
                     * @param _name 漏洞名称
                     * 
                     */
                    void SetName(const std::string& _name);

                    /**
                     * 判断参数 Name 是否已赋值
                     * @return Name 是否已赋值
                     * 
                     */
                    bool NameHasBeenSet() const;

                    /**
                     * 获取该漏洞是否是需重点关注的漏洞
                     * @return IsSuggest 该漏洞是否是需重点关注的漏洞
                     * 
                     */
                    bool GetIsSuggest() const;

                    /**
                     * 设置该漏洞是否是需重点关注的漏洞
                     * @param _isSuggest 该漏洞是否是需重点关注的漏洞
                     * 
                     */
                    void SetIsSuggest(const bool& _isSuggest);

                    /**
                     * 判断参数 IsSuggest 是否已赋值
                     * @return IsSuggest 是否已赋值
                     * 
                     */
                    bool IsSuggestHasBeenSet() const;

                    /**
                     * 获取漏洞风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     * @return Severity 漏洞风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     * 
                     */
                    std::string GetSeverity() const;

                    /**
                     * 设置漏洞风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     * @param _severity 漏洞风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     * 
                     */
                    void SetSeverity(const std::string& _severity);

                    /**
                     * 判断参数 Severity 是否已赋值
                     * @return Severity 是否已赋值
                     * 
                     */
                    bool SeverityHasBeenSet() const;

                    /**
                     * 获取架构信息，如x86、ARM等，废弃，请使用ArchitectureList
注意：此字段可能返回 null，表示取不到有效值。
                     * @return Architecture 架构信息，如x86、ARM等，废弃，请使用ArchitectureList
注意：此字段可能返回 null，表示取不到有效值。
                     * @deprecated
                     */
                    std::vector<std::string> GetArchitecture() const;

                    /**
                     * 设置架构信息，如x86、ARM等，废弃，请使用ArchitectureList
注意：此字段可能返回 null，表示取不到有效值。
                     * @param _architecture 架构信息，如x86、ARM等，废弃，请使用ArchitectureList
注意：此字段可能返回 null，表示取不到有效值。
                     * @deprecated
                     */
                    void SetArchitecture(const std::vector<std::string>& _architecture);

                    /**
                     * 判断参数 Architecture 是否已赋值
                     * @return Architecture 是否已赋值
                     * @deprecated
                     */
                    bool ArchitectureHasBeenSet() const;

                    /**
                     * 获取架构信息，如x86、ARM等
注意：此字段可能返回 null，表示取不到有效值。
                     * @return ArchitectureList 架构信息，如x86、ARM等
注意：此字段可能返回 null，表示取不到有效值。
                     * 
                     */
                    std::vector<std::string> GetArchitectureList() const;

                    /**
                     * 设置架构信息，如x86、ARM等
注意：此字段可能返回 null，表示取不到有效值。
                     * @param _architectureList 架构信息，如x86、ARM等
注意：此字段可能返回 null，表示取不到有效值。
                     * 
                     */
                    void SetArchitectureList(const std::vector<std::string>& _architectureList);

                    /**
                     * 判断参数 ArchitectureList 是否已赋值
                     * @return ArchitectureList 是否已赋值
                     * 
                     */
                    bool ArchitectureListHasBeenSet() const;

                    /**
                     * 获取patch链接
注意：此字段可能返回 null，表示取不到有效值。
                     * @return PatchUrlList patch链接
注意：此字段可能返回 null，表示取不到有效值。
                     * 
                     */
                    std::vector<std::string> GetPatchUrlList() const;

                    /**
                     * 设置patch链接
注意：此字段可能返回 null，表示取不到有效值。
                     * @param _patchUrlList patch链接
注意：此字段可能返回 null，表示取不到有效值。
                     * 
                     */
                    void SetPatchUrlList(const std::vector<std::string>& _patchUrlList);

                    /**
                     * 判断参数 PatchUrlList 是否已赋值
                     * @return PatchUrlList 是否已赋值
                     * 
                     */
                    bool PatchUrlListHasBeenSet() const;

                private:

                    /**
                     * 漏洞ID
                     */
                    std::string m_vulID;
                    bool m_vulIDHasBeenSet;

                    /**
                     * 漏洞所属CVE编号
                     */
                    std::string m_cVEID;
                    bool m_cVEIDHasBeenSet;

                    /**
                     * 漏洞所属CNVD编号
                     */
                    std::string m_cNVDID;
                    bool m_cNVDIDHasBeenSet;

                    /**
                     * 漏洞所属CNNVD编号
                     */
                    std::string m_cNNVDID;
                    bool m_cNNVDIDHasBeenSet;

                    /**
                     * 漏洞名称
                     */
                    std::string m_name;
                    bool m_nameHasBeenSet;

                    /**
                     * 该漏洞是否是需重点关注的漏洞
                     */
                    bool m_isSuggest;
                    bool m_isSuggestHasBeenSet;

                    /**
                     * 漏洞风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     */
                    std::string m_severity;
                    bool m_severityHasBeenSet;

                    /**
                     * 架构信息，如x86、ARM等，废弃，请使用ArchitectureList
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::vector<std::string> m_architecture;
                    bool m_architectureHasBeenSet;

                    /**
                     * 架构信息，如x86、ARM等
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::vector<std::string> m_architectureList;
                    bool m_architectureListHasBeenSet;

                    /**
                     * patch链接
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    std::vector<std::string> m_patchUrlList;
                    bool m_patchUrlListHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_BSCA_V20210811_MODEL_VULNERABILITYSUMMARY_H_
