/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_BSCA_V20210811_MODEL_VULNERABILITYDETAIL_H_
#define TENCENTCLOUD_BSCA_V20210811_MODEL_VULNERABILITYDETAIL_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>
#include <tencentcloud/bsca/v20210811/model/CVSSV2Info.h>
#include <tencentcloud/bsca/v20210811/model/CVSSV3Info.h>


namespace TencentCloud
{
    namespace Bsca
    {
        namespace V20210811
        {
            namespace Model
            {
                /**
                * 描述漏洞详细信息。
                */
                class VulnerabilityDetail : public AbstractModel
                {
                public:
                    VulnerabilityDetail();
                    ~VulnerabilityDetail() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取漏洞类别
                     * @return Category 漏洞类别
                     */
                    std::string GetCategory() const;

                    /**
                     * 设置漏洞类别
                     * @param Category 漏洞类别
                     */
                    void SetCategory(const std::string& _category);

                    /**
                     * 判断参数 Category 是否已赋值
                     * @return Category 是否已赋值
                     */
                    bool CategoryHasBeenSet() const;

                    /**
                     * 获取漏洞分类
                     * @return CategoryType 漏洞分类
                     */
                    std::string GetCategoryType() const;

                    /**
                     * 设置漏洞分类
                     * @param CategoryType 漏洞分类
                     */
                    void SetCategoryType(const std::string& _categoryType);

                    /**
                     * 判断参数 CategoryType 是否已赋值
                     * @return CategoryType 是否已赋值
                     */
                    bool CategoryTypeHasBeenSet() const;

                    /**
                     * 获取漏洞描述
                     * @return Description 漏洞描述
                     */
                    std::string GetDescription() const;

                    /**
                     * 设置漏洞描述
                     * @param Description 漏洞描述
                     */
                    void SetDescription(const std::string& _description);

                    /**
                     * 判断参数 Description 是否已赋值
                     * @return Description 是否已赋值
                     */
                    bool DescriptionHasBeenSet() const;

                    /**
                     * 获取漏洞官方解决方案
                     * @return OfficialSolution 漏洞官方解决方案
                     */
                    std::string GetOfficialSolution() const;

                    /**
                     * 设置漏洞官方解决方案
                     * @param OfficialSolution 漏洞官方解决方案
                     */
                    void SetOfficialSolution(const std::string& _officialSolution);

                    /**
                     * 判断参数 OfficialSolution 是否已赋值
                     * @return OfficialSolution 是否已赋值
                     */
                    bool OfficialSolutionHasBeenSet() const;

                    /**
                     * 获取漏洞信息参考列表
                     * @return ReferenceList 漏洞信息参考列表
                     */
                    std::vector<std::string> GetReferenceList() const;

                    /**
                     * 设置漏洞信息参考列表
                     * @param ReferenceList 漏洞信息参考列表
                     */
                    void SetReferenceList(const std::vector<std::string>& _referenceList);

                    /**
                     * 判断参数 ReferenceList 是否已赋值
                     * @return ReferenceList 是否已赋值
                     */
                    bool ReferenceListHasBeenSet() const;

                    /**
                     * 获取漏洞防御方案
                     * @return DefenseSolution 漏洞防御方案
                     */
                    std::string GetDefenseSolution() const;

                    /**
                     * 设置漏洞防御方案
                     * @param DefenseSolution 漏洞防御方案
                     */
                    void SetDefenseSolution(const std::string& _defenseSolution);

                    /**
                     * 判断参数 DefenseSolution 是否已赋值
                     * @return DefenseSolution 是否已赋值
                     */
                    bool DefenseSolutionHasBeenSet() const;

                    /**
                     * 获取漏洞CVSSv2信息
注意：此字段可能返回 null，表示取不到有效值。
                     * @return CVSSv2Info 漏洞CVSSv2信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    CVSSV2Info GetCVSSv2Info() const;

                    /**
                     * 设置漏洞CVSSv2信息
注意：此字段可能返回 null，表示取不到有效值。
                     * @param CVSSv2Info 漏洞CVSSv2信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    void SetCVSSv2Info(const CVSSV2Info& _cVSSv2Info);

                    /**
                     * 判断参数 CVSSv2Info 是否已赋值
                     * @return CVSSv2Info 是否已赋值
                     */
                    bool CVSSv2InfoHasBeenSet() const;

                    /**
                     * 获取漏洞CVSSv3信息
注意：此字段可能返回 null，表示取不到有效值。
                     * @return CVSSv3Info 漏洞CVSSv3信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    CVSSV3Info GetCVSSv3Info() const;

                    /**
                     * 设置漏洞CVSSv3信息
注意：此字段可能返回 null，表示取不到有效值。
                     * @param CVSSv3Info 漏洞CVSSv3信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    void SetCVSSv3Info(const CVSSV3Info& _cVSSv3Info);

                    /**
                     * 判断参数 CVSSv3Info 是否已赋值
                     * @return CVSSv3Info 是否已赋值
                     */
                    bool CVSSv3InfoHasBeenSet() const;

                    /**
                     * 获取漏洞提交时间
                     * @return SubmitTime 漏洞提交时间
                     */
                    std::string GetSubmitTime() const;

                    /**
                     * 设置漏洞提交时间
                     * @param SubmitTime 漏洞提交时间
                     */
                    void SetSubmitTime(const std::string& _submitTime);

                    /**
                     * 判断参数 SubmitTime 是否已赋值
                     * @return SubmitTime 是否已赋值
                     */
                    bool SubmitTimeHasBeenSet() const;

                    /**
                     * 获取CWE编号
                     * @return CWEID CWE编号
                     */
                    std::string GetCWEID() const;

                    /**
                     * 设置CWE编号
                     * @param CWEID CWE编号
                     */
                    void SetCWEID(const std::string& _cWEID);

                    /**
                     * 判断参数 CWEID 是否已赋值
                     * @return CWEID 是否已赋值
                     */
                    bool CWEIDHasBeenSet() const;

                    /**
                     * 获取漏洞CVSSv2向量
                     * @return CVSSv2Vector 漏洞CVSSv2向量
                     */
                    std::string GetCVSSv2Vector() const;

                    /**
                     * 设置漏洞CVSSv2向量
                     * @param CVSSv2Vector 漏洞CVSSv2向量
                     */
                    void SetCVSSv2Vector(const std::string& _cVSSv2Vector);

                    /**
                     * 判断参数 CVSSv2Vector 是否已赋值
                     * @return CVSSv2Vector 是否已赋值
                     */
                    bool CVSSv2VectorHasBeenSet() const;

                    /**
                     * 获取漏洞CVSSv3向量
                     * @return CVSSv3Vector 漏洞CVSSv3向量
                     */
                    std::string GetCVSSv3Vector() const;

                    /**
                     * 设置漏洞CVSSv3向量
                     * @param CVSSv3Vector 漏洞CVSSv3向量
                     */
                    void SetCVSSv3Vector(const std::string& _cVSSv3Vector);

                    /**
                     * 判断参数 CVSSv3Vector 是否已赋值
                     * @return CVSSv3Vector 是否已赋值
                     */
                    bool CVSSv3VectorHasBeenSet() const;

                private:

                    /**
                     * 漏洞类别
                     */
                    std::string m_category;
                    bool m_categoryHasBeenSet;

                    /**
                     * 漏洞分类
                     */
                    std::string m_categoryType;
                    bool m_categoryTypeHasBeenSet;

                    /**
                     * 漏洞描述
                     */
                    std::string m_description;
                    bool m_descriptionHasBeenSet;

                    /**
                     * 漏洞官方解决方案
                     */
                    std::string m_officialSolution;
                    bool m_officialSolutionHasBeenSet;

                    /**
                     * 漏洞信息参考列表
                     */
                    std::vector<std::string> m_referenceList;
                    bool m_referenceListHasBeenSet;

                    /**
                     * 漏洞防御方案
                     */
                    std::string m_defenseSolution;
                    bool m_defenseSolutionHasBeenSet;

                    /**
                     * 漏洞CVSSv2信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    CVSSV2Info m_cVSSv2Info;
                    bool m_cVSSv2InfoHasBeenSet;

                    /**
                     * 漏洞CVSSv3信息
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    CVSSV3Info m_cVSSv3Info;
                    bool m_cVSSv3InfoHasBeenSet;

                    /**
                     * 漏洞提交时间
                     */
                    std::string m_submitTime;
                    bool m_submitTimeHasBeenSet;

                    /**
                     * CWE编号
                     */
                    std::string m_cWEID;
                    bool m_cWEIDHasBeenSet;

                    /**
                     * 漏洞CVSSv2向量
                     */
                    std::string m_cVSSv2Vector;
                    bool m_cVSSv2VectorHasBeenSet;

                    /**
                     * 漏洞CVSSv3向量
                     */
                    std::string m_cVSSv3Vector;
                    bool m_cVSSv3VectorHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_BSCA_V20210811_MODEL_VULNERABILITYDETAIL_H_
