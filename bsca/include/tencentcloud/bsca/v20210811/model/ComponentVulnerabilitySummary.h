/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef TENCENTCLOUD_BSCA_V20210811_MODEL_COMPONENTVULNERABILITYSUMMARY_H_
#define TENCENTCLOUD_BSCA_V20210811_MODEL_COMPONENTVULNERABILITYSUMMARY_H_

#include <string>
#include <vector>
#include <map>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>
#include <tencentcloud/core/AbstractModel.h>
#include <tencentcloud/bsca/v20210811/model/PURL.h>


namespace TencentCloud
{
    namespace Bsca
    {
        namespace V20210811
        {
            namespace Model
            {
                /**
                * 与输入组件相关的漏洞信息摘要信息。
                */
                class ComponentVulnerabilitySummary : public AbstractModel
                {
                public:
                    ComponentVulnerabilitySummary();
                    ~ComponentVulnerabilitySummary() = default;
                    void ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const;
                    CoreInternalOutcome Deserialize(const rapidjson::Value &value);


                    /**
                     * 获取用于匹配漏洞的PURL
注意：此字段可能返回 null，表示取不到有效值。
                     * @return PURL 用于匹配漏洞的PURL
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    PURL GetPURL() const;

                    /**
                     * 设置用于匹配漏洞的PURL
注意：此字段可能返回 null，表示取不到有效值。
                     * @param PURL 用于匹配漏洞的PURL
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    void SetPURL(const PURL& _pURL);

                    /**
                     * 判断参数 PURL 是否已赋值
                     * @return PURL 是否已赋值
                     */
                    bool PURLHasBeenSet() const;

                    /**
                     * 获取该组件是否包含修复漏洞的官方补丁
                     * @return CanBeFixed 该组件是否包含修复漏洞的官方补丁
                     */
                    bool GetCanBeFixed() const;

                    /**
                     * 设置该组件是否包含修复漏洞的官方补丁
                     * @param CanBeFixed 该组件是否包含修复漏洞的官方补丁
                     */
                    void SetCanBeFixed(const bool& _canBeFixed);

                    /**
                     * 判断参数 CanBeFixed 是否已赋值
                     * @return CanBeFixed 是否已赋值
                     */
                    bool CanBeFixedHasBeenSet() const;

                    /**
                     * 获取修复漏洞的组件版本号
                     * @return FixedVersion 修复漏洞的组件版本号
                     */
                    std::string GetFixedVersion() const;

                    /**
                     * 设置修复漏洞的组件版本号
                     * @param FixedVersion 修复漏洞的组件版本号
                     */
                    void SetFixedVersion(const std::string& _fixedVersion);

                    /**
                     * 判断参数 FixedVersion 是否已赋值
                     * @return FixedVersion 是否已赋值
                     */
                    bool FixedVersionHasBeenSet() const;

                    /**
                     * 获取漏洞影响的组件版本号
                     * @return AffectedVersion 漏洞影响的组件版本号
                     */
                    std::string GetAffectedVersion() const;

                    /**
                     * 设置漏洞影响的组件版本号
                     * @param AffectedVersion 漏洞影响的组件版本号
                     */
                    void SetAffectedVersion(const std::string& _affectedVersion);

                    /**
                     * 判断参数 AffectedVersion 是否已赋值
                     * @return AffectedVersion 是否已赋值
                     */
                    bool AffectedVersionHasBeenSet() const;

                    /**
                     * 获取漏洞影响组件
                     * @return AffectedComponent 漏洞影响组件
                     */
                    std::string GetAffectedComponent() const;

                    /**
                     * 设置漏洞影响组件
                     * @param AffectedComponent 漏洞影响组件
                     */
                    void SetAffectedComponent(const std::string& _affectedComponent);

                    /**
                     * 判断参数 AffectedComponent 是否已赋值
                     * @return AffectedComponent 是否已赋值
                     */
                    bool AffectedComponentHasBeenSet() const;

                    /**
                     * 获取漏洞在该产品中的风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     * @return RiskLevel 漏洞在该产品中的风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     */
                    std::string GetRiskLevel() const;

                    /**
                     * 设置漏洞在该产品中的风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     * @param RiskLevel 漏洞在该产品中的风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     */
                    void SetRiskLevel(const std::string& _riskLevel);

                    /**
                     * 判断参数 RiskLevel 是否已赋值
                     * @return RiskLevel 是否已赋值
                     */
                    bool RiskLevelHasBeenSet() const;

                private:

                    /**
                     * 用于匹配漏洞的PURL
注意：此字段可能返回 null，表示取不到有效值。
                     */
                    PURL m_pURL;
                    bool m_pURLHasBeenSet;

                    /**
                     * 该组件是否包含修复漏洞的官方补丁
                     */
                    bool m_canBeFixed;
                    bool m_canBeFixedHasBeenSet;

                    /**
                     * 修复漏洞的组件版本号
                     */
                    std::string m_fixedVersion;
                    bool m_fixedVersionHasBeenSet;

                    /**
                     * 漏洞影响的组件版本号
                     */
                    std::string m_affectedVersion;
                    bool m_affectedVersionHasBeenSet;

                    /**
                     * 漏洞影响组件
                     */
                    std::string m_affectedComponent;
                    bool m_affectedComponentHasBeenSet;

                    /**
                     * 漏洞在该产品中的风险等级
<li>Critical</li>
<li>High</li>
<li>Medium</li>
<li>Low</li>
                     */
                    std::string m_riskLevel;
                    bool m_riskLevelHasBeenSet;

                };
            }
        }
    }
}

#endif // !TENCENTCLOUD_BSCA_V20210811_MODEL_COMPONENTVULNERABILITYSUMMARY_H_
