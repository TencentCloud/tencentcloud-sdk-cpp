/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/bsca/v20210811/model/ComponentVulnerabilitySummary.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Bsca::V20210811::Model;
using namespace std;

ComponentVulnerabilitySummary::ComponentVulnerabilitySummary() :
    m_pURLHasBeenSet(false),
    m_canBeFixedHasBeenSet(false),
    m_fixedVersionHasBeenSet(false),
    m_affectedVersionHasBeenSet(false),
    m_affectedComponentHasBeenSet(false),
    m_riskLevelHasBeenSet(false)
{
}

CoreInternalOutcome ComponentVulnerabilitySummary::Deserialize(const rapidjson::Value &value)
{
    string requestId = "";


    if (value.HasMember("PURL") && !value["PURL"].IsNull())
    {
        if (!value["PURL"].IsObject())
        {
            return CoreInternalOutcome(Core::Error("response `ComponentVulnerabilitySummary.PURL` is not object type").SetRequestId(requestId));
        }

        CoreInternalOutcome outcome = m_pURL.Deserialize(value["PURL"]);
        if (!outcome.IsSuccess())
        {
            outcome.GetError().SetRequestId(requestId);
            return outcome;
        }

        m_pURLHasBeenSet = true;
    }

    if (value.HasMember("CanBeFixed") && !value["CanBeFixed"].IsNull())
    {
        if (!value["CanBeFixed"].IsBool())
        {
            return CoreInternalOutcome(Core::Error("response `ComponentVulnerabilitySummary.CanBeFixed` IsBool=false incorrectly").SetRequestId(requestId));
        }
        m_canBeFixed = value["CanBeFixed"].GetBool();
        m_canBeFixedHasBeenSet = true;
    }

    if (value.HasMember("FixedVersion") && !value["FixedVersion"].IsNull())
    {
        if (!value["FixedVersion"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `ComponentVulnerabilitySummary.FixedVersion` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_fixedVersion = string(value["FixedVersion"].GetString());
        m_fixedVersionHasBeenSet = true;
    }

    if (value.HasMember("AffectedVersion") && !value["AffectedVersion"].IsNull())
    {
        if (!value["AffectedVersion"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `ComponentVulnerabilitySummary.AffectedVersion` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_affectedVersion = string(value["AffectedVersion"].GetString());
        m_affectedVersionHasBeenSet = true;
    }

    if (value.HasMember("AffectedComponent") && !value["AffectedComponent"].IsNull())
    {
        if (!value["AffectedComponent"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `ComponentVulnerabilitySummary.AffectedComponent` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_affectedComponent = string(value["AffectedComponent"].GetString());
        m_affectedComponentHasBeenSet = true;
    }

    if (value.HasMember("RiskLevel") && !value["RiskLevel"].IsNull())
    {
        if (!value["RiskLevel"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `ComponentVulnerabilitySummary.RiskLevel` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_riskLevel = string(value["RiskLevel"].GetString());
        m_riskLevelHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

void ComponentVulnerabilitySummary::ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const
{

    if (m_pURLHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "PURL";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(rapidjson::kObjectType).Move(), allocator);
        m_pURL.ToJsonObject(value[key.c_str()], allocator);
    }

    if (m_canBeFixedHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CanBeFixed";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_canBeFixed, allocator);
    }

    if (m_fixedVersionHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "FixedVersion";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_fixedVersion.c_str(), allocator).Move(), allocator);
    }

    if (m_affectedVersionHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "AffectedVersion";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_affectedVersion.c_str(), allocator).Move(), allocator);
    }

    if (m_affectedComponentHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "AffectedComponent";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_affectedComponent.c_str(), allocator).Move(), allocator);
    }

    if (m_riskLevelHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "RiskLevel";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_riskLevel.c_str(), allocator).Move(), allocator);
    }

}


PURL ComponentVulnerabilitySummary::GetPURL() const
{
    return m_pURL;
}

void ComponentVulnerabilitySummary::SetPURL(const PURL& _pURL)
{
    m_pURL = _pURL;
    m_pURLHasBeenSet = true;
}

bool ComponentVulnerabilitySummary::PURLHasBeenSet() const
{
    return m_pURLHasBeenSet;
}

bool ComponentVulnerabilitySummary::GetCanBeFixed() const
{
    return m_canBeFixed;
}

void ComponentVulnerabilitySummary::SetCanBeFixed(const bool& _canBeFixed)
{
    m_canBeFixed = _canBeFixed;
    m_canBeFixedHasBeenSet = true;
}

bool ComponentVulnerabilitySummary::CanBeFixedHasBeenSet() const
{
    return m_canBeFixedHasBeenSet;
}

string ComponentVulnerabilitySummary::GetFixedVersion() const
{
    return m_fixedVersion;
}

void ComponentVulnerabilitySummary::SetFixedVersion(const string& _fixedVersion)
{
    m_fixedVersion = _fixedVersion;
    m_fixedVersionHasBeenSet = true;
}

bool ComponentVulnerabilitySummary::FixedVersionHasBeenSet() const
{
    return m_fixedVersionHasBeenSet;
}

string ComponentVulnerabilitySummary::GetAffectedVersion() const
{
    return m_affectedVersion;
}

void ComponentVulnerabilitySummary::SetAffectedVersion(const string& _affectedVersion)
{
    m_affectedVersion = _affectedVersion;
    m_affectedVersionHasBeenSet = true;
}

bool ComponentVulnerabilitySummary::AffectedVersionHasBeenSet() const
{
    return m_affectedVersionHasBeenSet;
}

string ComponentVulnerabilitySummary::GetAffectedComponent() const
{
    return m_affectedComponent;
}

void ComponentVulnerabilitySummary::SetAffectedComponent(const string& _affectedComponent)
{
    m_affectedComponent = _affectedComponent;
    m_affectedComponentHasBeenSet = true;
}

bool ComponentVulnerabilitySummary::AffectedComponentHasBeenSet() const
{
    return m_affectedComponentHasBeenSet;
}

string ComponentVulnerabilitySummary::GetRiskLevel() const
{
    return m_riskLevel;
}

void ComponentVulnerabilitySummary::SetRiskLevel(const string& _riskLevel)
{
    m_riskLevel = _riskLevel;
    m_riskLevelHasBeenSet = true;
}

bool ComponentVulnerabilitySummary::RiskLevelHasBeenSet() const
{
    return m_riskLevelHasBeenSet;
}

