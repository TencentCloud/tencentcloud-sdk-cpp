/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/bsca/v20210811/model/VulnerabilityDetail.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Bsca::V20210811::Model;
using namespace std;

VulnerabilityDetail::VulnerabilityDetail() :
    m_categoryHasBeenSet(false),
    m_categoryTypeHasBeenSet(false),
    m_descriptionHasBeenSet(false),
    m_officialSolutionHasBeenSet(false),
    m_referenceListHasBeenSet(false),
    m_defenseSolutionHasBeenSet(false),
    m_cVSSv2InfoHasBeenSet(false),
    m_cVSSv3InfoHasBeenSet(false),
    m_submitTimeHasBeenSet(false),
    m_cWEIDHasBeenSet(false),
    m_cVSSv2VectorHasBeenSet(false),
    m_cVSSv3VectorHasBeenSet(false)
{
}

CoreInternalOutcome VulnerabilityDetail::Deserialize(const rapidjson::Value &value)
{
    string requestId = "";


    if (value.HasMember("Category") && !value["Category"].IsNull())
    {
        if (!value["Category"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.Category` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_category = string(value["Category"].GetString());
        m_categoryHasBeenSet = true;
    }

    if (value.HasMember("CategoryType") && !value["CategoryType"].IsNull())
    {
        if (!value["CategoryType"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.CategoryType` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_categoryType = string(value["CategoryType"].GetString());
        m_categoryTypeHasBeenSet = true;
    }

    if (value.HasMember("Description") && !value["Description"].IsNull())
    {
        if (!value["Description"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.Description` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_description = string(value["Description"].GetString());
        m_descriptionHasBeenSet = true;
    }

    if (value.HasMember("OfficialSolution") && !value["OfficialSolution"].IsNull())
    {
        if (!value["OfficialSolution"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.OfficialSolution` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_officialSolution = string(value["OfficialSolution"].GetString());
        m_officialSolutionHasBeenSet = true;
    }

    if (value.HasMember("ReferenceList") && !value["ReferenceList"].IsNull())
    {
        if (!value["ReferenceList"].IsArray())
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.ReferenceList` is not array type"));

        const rapidjson::Value &tmpValue = value["ReferenceList"];
        for (rapidjson::Value::ConstValueIterator itr = tmpValue.Begin(); itr != tmpValue.End(); ++itr)
        {
            m_referenceList.push_back((*itr).GetString());
        }
        m_referenceListHasBeenSet = true;
    }

    if (value.HasMember("DefenseSolution") && !value["DefenseSolution"].IsNull())
    {
        if (!value["DefenseSolution"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.DefenseSolution` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_defenseSolution = string(value["DefenseSolution"].GetString());
        m_defenseSolutionHasBeenSet = true;
    }

    if (value.HasMember("CVSSv2Info") && !value["CVSSv2Info"].IsNull())
    {
        if (!value["CVSSv2Info"].IsObject())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.CVSSv2Info` is not object type").SetRequestId(requestId));
        }

        CoreInternalOutcome outcome = m_cVSSv2Info.Deserialize(value["CVSSv2Info"]);
        if (!outcome.IsSuccess())
        {
            outcome.GetError().SetRequestId(requestId);
            return outcome;
        }

        m_cVSSv2InfoHasBeenSet = true;
    }

    if (value.HasMember("CVSSv3Info") && !value["CVSSv3Info"].IsNull())
    {
        if (!value["CVSSv3Info"].IsObject())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.CVSSv3Info` is not object type").SetRequestId(requestId));
        }

        CoreInternalOutcome outcome = m_cVSSv3Info.Deserialize(value["CVSSv3Info"]);
        if (!outcome.IsSuccess())
        {
            outcome.GetError().SetRequestId(requestId);
            return outcome;
        }

        m_cVSSv3InfoHasBeenSet = true;
    }

    if (value.HasMember("SubmitTime") && !value["SubmitTime"].IsNull())
    {
        if (!value["SubmitTime"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.SubmitTime` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_submitTime = string(value["SubmitTime"].GetString());
        m_submitTimeHasBeenSet = true;
    }

    if (value.HasMember("CWEID") && !value["CWEID"].IsNull())
    {
        if (!value["CWEID"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.CWEID` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_cWEID = string(value["CWEID"].GetString());
        m_cWEIDHasBeenSet = true;
    }

    if (value.HasMember("CVSSv2Vector") && !value["CVSSv2Vector"].IsNull())
    {
        if (!value["CVSSv2Vector"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.CVSSv2Vector` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_cVSSv2Vector = string(value["CVSSv2Vector"].GetString());
        m_cVSSv2VectorHasBeenSet = true;
    }

    if (value.HasMember("CVSSv3Vector") && !value["CVSSv3Vector"].IsNull())
    {
        if (!value["CVSSv3Vector"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilityDetail.CVSSv3Vector` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_cVSSv3Vector = string(value["CVSSv3Vector"].GetString());
        m_cVSSv3VectorHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

void VulnerabilityDetail::ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const
{

    if (m_categoryHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Category";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_category.c_str(), allocator).Move(), allocator);
    }

    if (m_categoryTypeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CategoryType";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_categoryType.c_str(), allocator).Move(), allocator);
    }

    if (m_descriptionHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Description";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_description.c_str(), allocator).Move(), allocator);
    }

    if (m_officialSolutionHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "OfficialSolution";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_officialSolution.c_str(), allocator).Move(), allocator);
    }

    if (m_referenceListHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "ReferenceList";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_referenceList.begin(); itr != m_referenceList.end(); ++itr)
        {
            value[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_defenseSolutionHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "DefenseSolution";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_defenseSolution.c_str(), allocator).Move(), allocator);
    }

    if (m_cVSSv2InfoHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CVSSv2Info";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(rapidjson::kObjectType).Move(), allocator);
        m_cVSSv2Info.ToJsonObject(value[key.c_str()], allocator);
    }

    if (m_cVSSv3InfoHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CVSSv3Info";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(rapidjson::kObjectType).Move(), allocator);
        m_cVSSv3Info.ToJsonObject(value[key.c_str()], allocator);
    }

    if (m_submitTimeHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "SubmitTime";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_submitTime.c_str(), allocator).Move(), allocator);
    }

    if (m_cWEIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CWEID";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_cWEID.c_str(), allocator).Move(), allocator);
    }

    if (m_cVSSv2VectorHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CVSSv2Vector";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_cVSSv2Vector.c_str(), allocator).Move(), allocator);
    }

    if (m_cVSSv3VectorHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CVSSv3Vector";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_cVSSv3Vector.c_str(), allocator).Move(), allocator);
    }

}


string VulnerabilityDetail::GetCategory() const
{
    return m_category;
}

void VulnerabilityDetail::SetCategory(const string& _category)
{
    m_category = _category;
    m_categoryHasBeenSet = true;
}

bool VulnerabilityDetail::CategoryHasBeenSet() const
{
    return m_categoryHasBeenSet;
}

string VulnerabilityDetail::GetCategoryType() const
{
    return m_categoryType;
}

void VulnerabilityDetail::SetCategoryType(const string& _categoryType)
{
    m_categoryType = _categoryType;
    m_categoryTypeHasBeenSet = true;
}

bool VulnerabilityDetail::CategoryTypeHasBeenSet() const
{
    return m_categoryTypeHasBeenSet;
}

string VulnerabilityDetail::GetDescription() const
{
    return m_description;
}

void VulnerabilityDetail::SetDescription(const string& _description)
{
    m_description = _description;
    m_descriptionHasBeenSet = true;
}

bool VulnerabilityDetail::DescriptionHasBeenSet() const
{
    return m_descriptionHasBeenSet;
}

string VulnerabilityDetail::GetOfficialSolution() const
{
    return m_officialSolution;
}

void VulnerabilityDetail::SetOfficialSolution(const string& _officialSolution)
{
    m_officialSolution = _officialSolution;
    m_officialSolutionHasBeenSet = true;
}

bool VulnerabilityDetail::OfficialSolutionHasBeenSet() const
{
    return m_officialSolutionHasBeenSet;
}

vector<string> VulnerabilityDetail::GetReferenceList() const
{
    return m_referenceList;
}

void VulnerabilityDetail::SetReferenceList(const vector<string>& _referenceList)
{
    m_referenceList = _referenceList;
    m_referenceListHasBeenSet = true;
}

bool VulnerabilityDetail::ReferenceListHasBeenSet() const
{
    return m_referenceListHasBeenSet;
}

string VulnerabilityDetail::GetDefenseSolution() const
{
    return m_defenseSolution;
}

void VulnerabilityDetail::SetDefenseSolution(const string& _defenseSolution)
{
    m_defenseSolution = _defenseSolution;
    m_defenseSolutionHasBeenSet = true;
}

bool VulnerabilityDetail::DefenseSolutionHasBeenSet() const
{
    return m_defenseSolutionHasBeenSet;
}

CVSSV2Info VulnerabilityDetail::GetCVSSv2Info() const
{
    return m_cVSSv2Info;
}

void VulnerabilityDetail::SetCVSSv2Info(const CVSSV2Info& _cVSSv2Info)
{
    m_cVSSv2Info = _cVSSv2Info;
    m_cVSSv2InfoHasBeenSet = true;
}

bool VulnerabilityDetail::CVSSv2InfoHasBeenSet() const
{
    return m_cVSSv2InfoHasBeenSet;
}

CVSSV3Info VulnerabilityDetail::GetCVSSv3Info() const
{
    return m_cVSSv3Info;
}

void VulnerabilityDetail::SetCVSSv3Info(const CVSSV3Info& _cVSSv3Info)
{
    m_cVSSv3Info = _cVSSv3Info;
    m_cVSSv3InfoHasBeenSet = true;
}

bool VulnerabilityDetail::CVSSv3InfoHasBeenSet() const
{
    return m_cVSSv3InfoHasBeenSet;
}

string VulnerabilityDetail::GetSubmitTime() const
{
    return m_submitTime;
}

void VulnerabilityDetail::SetSubmitTime(const string& _submitTime)
{
    m_submitTime = _submitTime;
    m_submitTimeHasBeenSet = true;
}

bool VulnerabilityDetail::SubmitTimeHasBeenSet() const
{
    return m_submitTimeHasBeenSet;
}

string VulnerabilityDetail::GetCWEID() const
{
    return m_cWEID;
}

void VulnerabilityDetail::SetCWEID(const string& _cWEID)
{
    m_cWEID = _cWEID;
    m_cWEIDHasBeenSet = true;
}

bool VulnerabilityDetail::CWEIDHasBeenSet() const
{
    return m_cWEIDHasBeenSet;
}

string VulnerabilityDetail::GetCVSSv2Vector() const
{
    return m_cVSSv2Vector;
}

void VulnerabilityDetail::SetCVSSv2Vector(const string& _cVSSv2Vector)
{
    m_cVSSv2Vector = _cVSSv2Vector;
    m_cVSSv2VectorHasBeenSet = true;
}

bool VulnerabilityDetail::CVSSv2VectorHasBeenSet() const
{
    return m_cVSSv2VectorHasBeenSet;
}

string VulnerabilityDetail::GetCVSSv3Vector() const
{
    return m_cVSSv3Vector;
}

void VulnerabilityDetail::SetCVSSv3Vector(const string& _cVSSv3Vector)
{
    m_cVSSv3Vector = _cVSSv3Vector;
    m_cVSSv3VectorHasBeenSet = true;
}

bool VulnerabilityDetail::CVSSv3VectorHasBeenSet() const
{
    return m_cVSSv3VectorHasBeenSet;
}

