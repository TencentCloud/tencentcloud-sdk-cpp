/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/bsca/v20210811/model/DescribeKBVulnerabilityRequest.h>
#include <tencentcloud/core/utils/rapidjson/document.h>
#include <tencentcloud/core/utils/rapidjson/writer.h>
#include <tencentcloud/core/utils/rapidjson/stringbuffer.h>

using namespace TencentCloud::Bsca::V20210811::Model;
using namespace std;

DescribeKBVulnerabilityRequest::DescribeKBVulnerabilityRequest() :
    m_cVEIDHasBeenSet(false),
    m_vulIDHasBeenSet(false),
    m_cNVDIDHasBeenSet(false),
    m_cNNVDIDHasBeenSet(false),
    m_languageHasBeenSet(false)
{
}

string DescribeKBVulnerabilityRequest::ToJsonString() const
{
    rapidjson::Document d;
    d.SetObject();
    rapidjson::Document::AllocatorType& allocator = d.GetAllocator();


    if (m_cVEIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CVEID";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_cVEID.begin(); itr != m_cVEID.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_vulIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "VulID";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_vulID.begin(); itr != m_vulID.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_cNVDIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CNVDID";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_cNVDID.begin(); itr != m_cNVDID.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_cNNVDIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CNNVDID";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(rapidjson::kArrayType).Move(), allocator);

        for (auto itr = m_cNNVDID.begin(); itr != m_cNNVDID.end(); ++itr)
        {
            d[key.c_str()].PushBack(rapidjson::Value().SetString((*itr).c_str(), allocator), allocator);
        }
    }

    if (m_languageHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Language";
        iKey.SetString(key.c_str(), allocator);
        d.AddMember(iKey, rapidjson::Value(m_language.c_str(), allocator).Move(), allocator);
    }


    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    d.Accept(writer);
    return buffer.GetString();
}


vector<string> DescribeKBVulnerabilityRequest::GetCVEID() const
{
    return m_cVEID;
}

void DescribeKBVulnerabilityRequest::SetCVEID(const vector<string>& _cVEID)
{
    m_cVEID = _cVEID;
    m_cVEIDHasBeenSet = true;
}

bool DescribeKBVulnerabilityRequest::CVEIDHasBeenSet() const
{
    return m_cVEIDHasBeenSet;
}

vector<string> DescribeKBVulnerabilityRequest::GetVulID() const
{
    return m_vulID;
}

void DescribeKBVulnerabilityRequest::SetVulID(const vector<string>& _vulID)
{
    m_vulID = _vulID;
    m_vulIDHasBeenSet = true;
}

bool DescribeKBVulnerabilityRequest::VulIDHasBeenSet() const
{
    return m_vulIDHasBeenSet;
}

vector<string> DescribeKBVulnerabilityRequest::GetCNVDID() const
{
    return m_cNVDID;
}

void DescribeKBVulnerabilityRequest::SetCNVDID(const vector<string>& _cNVDID)
{
    m_cNVDID = _cNVDID;
    m_cNVDIDHasBeenSet = true;
}

bool DescribeKBVulnerabilityRequest::CNVDIDHasBeenSet() const
{
    return m_cNVDIDHasBeenSet;
}

vector<string> DescribeKBVulnerabilityRequest::GetCNNVDID() const
{
    return m_cNNVDID;
}

void DescribeKBVulnerabilityRequest::SetCNNVDID(const vector<string>& _cNNVDID)
{
    m_cNNVDID = _cNNVDID;
    m_cNNVDIDHasBeenSet = true;
}

bool DescribeKBVulnerabilityRequest::CNNVDIDHasBeenSet() const
{
    return m_cNNVDIDHasBeenSet;
}

string DescribeKBVulnerabilityRequest::GetLanguage() const
{
    return m_language;
}

void DescribeKBVulnerabilityRequest::SetLanguage(const string& _language)
{
    m_language = _language;
    m_languageHasBeenSet = true;
}

bool DescribeKBVulnerabilityRequest::LanguageHasBeenSet() const
{
    return m_languageHasBeenSet;
}


