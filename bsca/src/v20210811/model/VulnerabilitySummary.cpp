/*
 * Copyright (c) 2017-2019 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <tencentcloud/bsca/v20210811/model/VulnerabilitySummary.h>

using TencentCloud::CoreInternalOutcome;
using namespace TencentCloud::Bsca::V20210811::Model;
using namespace std;

VulnerabilitySummary::VulnerabilitySummary() :
    m_vulIDHasBeenSet(false),
    m_cVEIDHasBeenSet(false),
    m_cNVDIDHasBeenSet(false),
    m_cNNVDIDHasBeenSet(false),
    m_nameHasBeenSet(false),
    m_isSuggestHasBeenSet(false),
    m_severityHasBeenSet(false)
{
}

CoreInternalOutcome VulnerabilitySummary::Deserialize(const rapidjson::Value &value)
{
    string requestId = "";


    if (value.HasMember("VulID") && !value["VulID"].IsNull())
    {
        if (!value["VulID"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilitySummary.VulID` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_vulID = string(value["VulID"].GetString());
        m_vulIDHasBeenSet = true;
    }

    if (value.HasMember("CVEID") && !value["CVEID"].IsNull())
    {
        if (!value["CVEID"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilitySummary.CVEID` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_cVEID = string(value["CVEID"].GetString());
        m_cVEIDHasBeenSet = true;
    }

    if (value.HasMember("CNVDID") && !value["CNVDID"].IsNull())
    {
        if (!value["CNVDID"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilitySummary.CNVDID` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_cNVDID = string(value["CNVDID"].GetString());
        m_cNVDIDHasBeenSet = true;
    }

    if (value.HasMember("CNNVDID") && !value["CNNVDID"].IsNull())
    {
        if (!value["CNNVDID"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilitySummary.CNNVDID` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_cNNVDID = string(value["CNNVDID"].GetString());
        m_cNNVDIDHasBeenSet = true;
    }

    if (value.HasMember("Name") && !value["Name"].IsNull())
    {
        if (!value["Name"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilitySummary.Name` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_name = string(value["Name"].GetString());
        m_nameHasBeenSet = true;
    }

    if (value.HasMember("IsSuggest") && !value["IsSuggest"].IsNull())
    {
        if (!value["IsSuggest"].IsBool())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilitySummary.IsSuggest` IsBool=false incorrectly").SetRequestId(requestId));
        }
        m_isSuggest = value["IsSuggest"].GetBool();
        m_isSuggestHasBeenSet = true;
    }

    if (value.HasMember("Severity") && !value["Severity"].IsNull())
    {
        if (!value["Severity"].IsString())
        {
            return CoreInternalOutcome(Core::Error("response `VulnerabilitySummary.Severity` IsString=false incorrectly").SetRequestId(requestId));
        }
        m_severity = string(value["Severity"].GetString());
        m_severityHasBeenSet = true;
    }


    return CoreInternalOutcome(true);
}

void VulnerabilitySummary::ToJsonObject(rapidjson::Value &value, rapidjson::Document::AllocatorType& allocator) const
{

    if (m_vulIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "VulID";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_vulID.c_str(), allocator).Move(), allocator);
    }

    if (m_cVEIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CVEID";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_cVEID.c_str(), allocator).Move(), allocator);
    }

    if (m_cNVDIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CNVDID";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_cNVDID.c_str(), allocator).Move(), allocator);
    }

    if (m_cNNVDIDHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "CNNVDID";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_cNNVDID.c_str(), allocator).Move(), allocator);
    }

    if (m_nameHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Name";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_name.c_str(), allocator).Move(), allocator);
    }

    if (m_isSuggestHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "IsSuggest";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, m_isSuggest, allocator);
    }

    if (m_severityHasBeenSet)
    {
        rapidjson::Value iKey(rapidjson::kStringType);
        string key = "Severity";
        iKey.SetString(key.c_str(), allocator);
        value.AddMember(iKey, rapidjson::Value(m_severity.c_str(), allocator).Move(), allocator);
    }

}


string VulnerabilitySummary::GetVulID() const
{
    return m_vulID;
}

void VulnerabilitySummary::SetVulID(const string& _vulID)
{
    m_vulID = _vulID;
    m_vulIDHasBeenSet = true;
}

bool VulnerabilitySummary::VulIDHasBeenSet() const
{
    return m_vulIDHasBeenSet;
}

string VulnerabilitySummary::GetCVEID() const
{
    return m_cVEID;
}

void VulnerabilitySummary::SetCVEID(const string& _cVEID)
{
    m_cVEID = _cVEID;
    m_cVEIDHasBeenSet = true;
}

bool VulnerabilitySummary::CVEIDHasBeenSet() const
{
    return m_cVEIDHasBeenSet;
}

string VulnerabilitySummary::GetCNVDID() const
{
    return m_cNVDID;
}

void VulnerabilitySummary::SetCNVDID(const string& _cNVDID)
{
    m_cNVDID = _cNVDID;
    m_cNVDIDHasBeenSet = true;
}

bool VulnerabilitySummary::CNVDIDHasBeenSet() const
{
    return m_cNVDIDHasBeenSet;
}

string VulnerabilitySummary::GetCNNVDID() const
{
    return m_cNNVDID;
}

void VulnerabilitySummary::SetCNNVDID(const string& _cNNVDID)
{
    m_cNNVDID = _cNNVDID;
    m_cNNVDIDHasBeenSet = true;
}

bool VulnerabilitySummary::CNNVDIDHasBeenSet() const
{
    return m_cNNVDIDHasBeenSet;
}

string VulnerabilitySummary::GetName() const
{
    return m_name;
}

void VulnerabilitySummary::SetName(const string& _name)
{
    m_name = _name;
    m_nameHasBeenSet = true;
}

bool VulnerabilitySummary::NameHasBeenSet() const
{
    return m_nameHasBeenSet;
}

bool VulnerabilitySummary::GetIsSuggest() const
{
    return m_isSuggest;
}

void VulnerabilitySummary::SetIsSuggest(const bool& _isSuggest)
{
    m_isSuggest = _isSuggest;
    m_isSuggestHasBeenSet = true;
}

bool VulnerabilitySummary::IsSuggestHasBeenSet() const
{
    return m_isSuggestHasBeenSet;
}

string VulnerabilitySummary::GetSeverity() const
{
    return m_severity;
}

void VulnerabilitySummary::SetSeverity(const string& _severity)
{
    m_severity = _severity;
    m_severityHasBeenSet = true;
}

bool VulnerabilitySummary::SeverityHasBeenSet() const
{
    return m_severityHasBeenSet;
}

